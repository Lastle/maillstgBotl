import asyncio
import random
from datetime import datetime
from typing import Dict, List, Optional, Any
from telethon import TelegramClient
from telethon.errors import ChatAdminRequiredError, FloodWaitError
from database.models import Account, Group, Mailing, MailingHistory
from database.database import get_db, get_async_db
from sqlalchemy import select, func
from utils.helpers import calculate_interval, truncate_text, format_time_ago
from services.night_mode import get_night_mode_settings
# API credentials —Ç–µ–ø–µ—Ä—å –±–µ—Ä—É—Ç—Å—è –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞

class MailingService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π"""
    
    def __init__(self):
        self.active_mailings: Dict[int, asyncio.Task] = {}
        self.clients: Dict[int, TelegramClient] = {}
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ main.py
    

    
    async def cleanup_old_mailings(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        async with get_async_db() as db:
            from sqlalchemy import select
            
            result = await db.execute(
                select(Mailing).filter(Mailing.is_active == True)
            )
            old_mailings = result.scalars().all()
            
            for mailing in old_mailings:
                mailing.is_active = False
                mailing.stopped_at = datetime.utcnow()
            
            await db.commit()
            if old_mailings:
                print(f"üßπ –û—á–∏—â–µ–Ω–æ {len(old_mailings)} —Å—Ç–∞—Ä—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
    
    async def create_client(self, account: Account) -> TelegramClient:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if account.id in self.clients:
            return self.clients[account.id]
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º API credentials –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ
        from config import TELEGRAM_API_ID, TELEGRAM_API_HASH
        api_id = account.api_id if account.api_id and account.api_id != 0 else TELEGRAM_API_ID
        api_hash = account.api_hash if account.api_hash else TELEGRAM_API_HASH
        
        session_name = f"session_{account.phone.replace('+', '')}"
        client = TelegramClient(session_name, api_id=api_id, api_hash=api_hash)
        await client.connect()
        
        if not await client.is_user_authorized():
            raise Exception(f"–ê–∫–∫–∞—É–Ω—Ç {account.phone} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
        
        self.clients[account.id] = client
        print(f"üîå –ö–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.phone} —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        return client
    
    async def start_mailing(self, mailing_id: int) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É"""
        print(f"üîß –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É {mailing_id}...")
        
        async with get_async_db() as db:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            mailing_result = await db.execute(
                select(Mailing).filter(Mailing.id == mailing_id)
            )
            mailing = mailing_result.scalar_one_or_none()
            
            if not mailing:
                print(f"‚ùå –†–∞—Å—Å—ã–ª–∫–∞ {mailing_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return {"success": False, "error": "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            
            if mailing.is_active:
                print(f"‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ {mailing_id} —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
                return {"success": False, "error": "–†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ –∑–∞–¥–∞—á–∞
            if mailing_id in self.active_mailings:
                print(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ {mailing_id} —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
                return {"success": False, "error": "–†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞"}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            mailing.is_active = True
            mailing.started_at = datetime.utcnow()
            await db.commit()
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏ {mailing_id} –æ–±–Ω–æ–≤–ª–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Ä–∞—Å—Å—ã–ª–∫–∏
        task = asyncio.create_task(self._mailing_worker(mailing_id))
        self.active_mailings[mailing_id] = task
        print(f"üöÄ –ó–∞–¥–∞—á–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ {mailing_id} —Å–æ–∑–¥–∞–Ω–∞")
        
        return {"success": True, "message": "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞"}
    
    async def stop_mailing(self, mailing_id: int) -> Dict[str, Any]:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É"""
        if mailing_id in self.active_mailings:
            task = self.active_mailings[mailing_id]
            task.cancel()
            del self.active_mailings[mailing_id]
        
        async with get_async_db() as db:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            mailing_result = await db.execute(
                select(Mailing).filter(Mailing.id == mailing_id)
            )
            mailing = mailing_result.scalar_one_or_none()
            
            if mailing:
                mailing.is_active = False
                mailing.stopped_at = datetime.utcnow()
                await db.commit()
        
        return {"success": True, "message": "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"}
    
    async def _mailing_worker(self, mailing_id: int):
        """–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏"""
        print(f"üîÑ –†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏ {mailing_id} –∑–∞–ø—É—â–µ–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è finally –±–ª–æ–∫–∞
        account = None
        group = None
        
        try:
            async with get_async_db() as db:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
                mailing_result = await db.execute(
                    select(Mailing).filter(Mailing.id == mailing_id)
                )
                mailing = mailing_result.scalar_one_or_none()
                
                if not mailing:
                    print(f"‚ùå –†–∞—Å—Å—ã–ª–∫–∞ {mailing_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
                account_result = await db.execute(
                    select(Account).filter(Account.id == mailing.account_id)
                )
                account = account_result.scalar_one_or_none()
                
                # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É
                group_result = await db.execute(
                    select(Group).filter(Group.id == mailing.group_id)
                )
                group = group_result.scalar_one_or_none()
                
                if not account or not group:
                    print(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ {mailing_id}")
                    return
                
                print(f"üì± –†–∞–±–æ—Ç–∞–µ–º —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º {account.phone} –∏ –≥—Ä—É–ø–ø–æ–π {group.title}")
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            print(f"üîå –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.phone}...")
            client = await self.create_client(account)
            print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω")
            
            # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ —Ü–∏–∫–ª–æ–º
            async with get_async_db() as db:
                result = await db.execute(
                    select(Mailing).filter(Mailing.id == mailing_id)
                )
                mailing = result.scalar_one_or_none()
                if not mailing or not mailing.is_active:
                    print(f"üõë –†–∞—Å—Å—ã–ª–∫–∞ {mailing_id} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –≤—ã—Ö–æ–¥–∏–º")
                    return
            
            while True:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞
                async with get_async_db() as db:
                    result = await db.execute(
                        select(Mailing).filter(Mailing.id == mailing_id)
                    )
                    mailing = result.scalar_one_or_none()
                    if not mailing or not mailing.is_active:
                        print(f"üõë –†–∞—Å—Å—ã–ª–∫–∞ {mailing_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")
                        break
                
                # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å —É—á–µ—Ç–æ–º –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                night_settings = get_night_mode_settings()
                interval = calculate_interval(
                    mailing.min_interval, 
                    mailing.max_interval,
                    night_settings["is_enabled"],
                    night_settings["start_hour"],
                    night_settings["end_hour"]
                )
                
                print(f"‚è∞ –†–∞—Å—Å—ã–ª–∫–∞ {mailing_id}: –∂–¥–µ–º {interval} –º–∏–Ω—É—Ç...")
                
                # –ñ–¥–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
                await asyncio.sleep(interval * 60)
                
                print(f"üì§ –†–∞—Å—Å—ã–ª–∫–∞ {mailing_id}: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ...")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self._send_message(client, group.id, mailing.id)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É {group.title} (—Ä–∞—Å—Å—ã–ª–∫–∞ {mailing_id})")
                
        except asyncio.CancelledError:
            print(f"üõë –†–∞—Å—Å—ã–ª–∫–∞ {mailing_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ {mailing_id}: {e}")
        finally:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –∫–ª–∏–µ–Ω—Ç –¥—Ä—É–≥–∏–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏
            try:
                if account and account.id in self.clients:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                    async with get_async_db() as db:
                        result = await db.execute(
                            select(func.count(Mailing.id)).filter(
                                Mailing.account_id == account.id,
                                Mailing.is_active == True,
                                Mailing.id != mailing_id
                            )
                        )
                        other_mailings = result.scalar()
                    
                    if other_mailings == 0:
                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
                        await self.clients[account.id].disconnect()
                        del self.clients[account.id]
                        print(f"üîå –ö–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.phone} –∑–∞–∫—Ä—ã—Ç (–Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫)")
                    else:
                        print(f"üîå –ö–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.phone} –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º ({other_mailings} –¥—Ä—É–≥–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫)")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            
                    # –û—á–∏—â–∞–µ–º –∑–∞–¥–∞—á—É
        if mailing_id in self.active_mailings:
            del self.active_mailings[mailing_id]
            print(f"üßπ –ó–∞–¥–∞—á–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ {mailing_id} –æ—á–∏—â–µ–Ω–∞")
    

    
    async def _send_message(self, client: TelegramClient, group_id: int, mailing_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î
            async with get_async_db() as db:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
                mailing_result = await db.execute(
                    select(Mailing).filter(Mailing.id == mailing_id)
                )
                mailing = mailing_result.scalar_one_or_none()
                
                group_result = await db.execute(
                    select(Group).filter(Group.id == group_id)
                )
                group = group_result.scalar_one_or_none()
                
                if not mailing or not group:
                    print(f"‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ {mailing_id}")
                    return
                
                # –õ–û–ì–ò: –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ
                print(f"üìã === –û–¢–õ–ê–î–ö–ê –ì–†–£–ü–ü–´ ===")
                print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {group.title}")
                print(f"   ID –≤ –ë–î: {group.group_id}")
                print(f"   Username: {group.username}")
                print(f"   –¢–∏–ø: {group.group_type}")
                print(f"   –ü—Ä–∏–≤–∞—Ç–Ω–∞—è: {group.is_private}")
                print(f"   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {group.member_count}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ username (–¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø)
                if group.username:
                    target = group.username
                    print(f"üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ USERNAME: @{target}")
                else:
                    # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
                    target = int(group.group_id)
                    print(f"üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ ID: {target}")
                
                print(f"üì§ –¢–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏: {mailing.mailing_type}")
                print(f"üìù –¢–µ–∫—Å—Ç: {mailing.text[:50] if mailing.text else '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}...")
                print(f"üìã === –ö–û–ù–ï–¶ –û–¢–õ–ê–î–ö–ò ===")
                print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É...")
                
                try:
                    if mailing.mailing_type == "text":
                        await client.send_message(target, mailing.text)
                    elif mailing.mailing_type == "photo":
                        await client.send_file(target, mailing.photo_path)
                    elif mailing.mailing_type == "photo_with_text":
                        await client.send_file(target, mailing.photo_path, caption=mailing.text)
                    
                    print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –£–°–ü–ï–®–ù–û –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {group.title} (target: {target})")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –¢–û–õ–¨–ö–û –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
                    history = MailingHistory(
                        mailing_id=mailing.id,
                        account_id=mailing.account_id,
                        group_id=mailing.group_id,
                        text=truncate_text(mailing.text or "")
                    )
                    db.add(history)
                    await db.commit()
                    print(f"üìù –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ {mailing_id}")
                    
                except Exception as send_error:
                    print(f"‚ùå –û–®–ò–ë–ö–ê –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É {group.title}: {send_error}")
                    print(f"   Target: {target}")
                    print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(send_error).__name__}")
                    # –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ _send_message: {e}")
    
    async def start_broadcast_all(self, text: str, mailing_type: str, 
                                interval_type: str, min_interval: int, 
                                max_interval: int, photo_path: Optional[str] = None) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤–æ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã"""
        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É: {text[:50] if text else '–±–µ–∑ —Ç–µ–∫—Å—Ç–∞'}...")
        
        async with get_async_db() as db:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
            accounts_result = await db.execute(
                select(Account).filter(Account.is_active == True)
            )
            accounts = accounts_result.scalars().all()
            print(f"üì± –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}")
            
            if not accounts:
                print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤!")
                return {"success": False, "error": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"}
            
            created_mailing_ids = []
            for account in accounts:
                # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
                groups_result = await db.execute(
                    select(Group).filter(Group.account_id == account.id)
                )
                groups = groups_result.scalars().all()
                print(f"üë• –ê–∫–∫–∞—É–Ω—Ç {account.phone}: –Ω–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø {len(groups)}")
                
                for group in groups:
                    print(f"   üìã –ì—Ä—É–ø–ø–∞: {group.title}")
                    mailing = Mailing(
                        text=text,
                        photo_path=photo_path,
                        mailing_type=mailing_type,
                        interval_type=interval_type,
                        min_interval=min_interval,
                        max_interval=max_interval,
                        account_id=account.id,
                        group_id=group.id,
                        is_active=False  # –°–æ–∑–¥–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é
                    )
                    db.add(mailing)
                    await db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –±–µ–∑ –∫–æ–º–º–∏—Ç–∞
                    created_mailing_ids.append(mailing.id)
                    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ ID: {mailing.id}")
            
            await db.commit()
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º {len(created_mailing_ids)} —Ä–∞—Å—Å—ã–ª–æ–∫...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        for i, mailing_id in enumerate(created_mailing_ids):
            result = await self.start_mailing(mailing_id)
            print(f"   üì§ –†–∞—Å—Å—ã–ª–∫–∞ {mailing_id}: {result}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–æ–º —Ä–∞—Å—Å—ã–ª–æ–∫
            if i < len(created_mailing_ids) - 1:
                await asyncio.sleep(1)
        
        return {"success": True, "message": f"–ó–∞–ø—É—â–µ–Ω–æ {len(created_mailing_ids)} —Ä–∞—Å—Å—ã–ª–æ–∫"}
    
    async def stop_broadcast_all(self) -> Dict[str, Any]:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        stopped_count = 0
        
        async with get_async_db() as db:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
            active_mailings_result = await db.execute(
                select(Mailing).filter(Mailing.is_active == True)
            )
            active_mailings = active_mailings_result.scalars().all()
            
            for mailing in active_mailings:
                await self.stop_mailing(mailing.id)
                stopped_count += 1
        
        return {"success": True, "message": f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {stopped_count} —Ä–∞—Å—Å—ã–ª–æ–∫"}
    
    async def get_mailing_history(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—ã–ª–æ–∫"""
        async with get_async_db() as db:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—ã–ª–æ–∫
            history_result = await db.execute(
                select(MailingHistory).order_by(
                    MailingHistory.sent_at.desc()
                ).limit(limit)
            )
            history = history_result.scalars().all()
            
            result = []
            for item in history:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
                account_result = await db.execute(
                    select(Account).filter(Account.id == item.account_id)
                )
                account = account_result.scalar_one_or_none()
                
                # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É
                group_result = await db.execute(
                    select(Group).filter(Group.id == item.group_id)
                )
                group = group_result.scalar_one_or_none()
                
                result.append({
                    "id": item.id,
                    "text": item.text,
                    "sent_at": format_time_ago(item.sent_at),
                    "account_name": account.name if account else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                    "group_title": group.title if group else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                    "interval_used": item.interval_used
                })
            
            return result
    
    async def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        for mailing_id in list(self.active_mailings.keys()):
            await self.stop_mailing(mailing_id)
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã (—Å–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏)
        clients_to_disconnect = list(self.clients.values())
        self.clients.clear()  # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å—Ä–∞–∑—É
        
        for client in clients_to_disconnect:
            try:
                await client.disconnect()
            except:
                pass

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
mailing_service = MailingService()
# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ main.py 