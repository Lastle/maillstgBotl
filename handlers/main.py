from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from utils.keyboards import get_main_menu_keyboard, get_night_mode_keyboard, get_back_keyboard, get_mailings_list_keyboard, get_mailing_details_keyboard
from services.night_mode import get_night_mode_status, enable_night_mode, disable_night_mode
from services.mailing_service import mailing_service
from database.database import get_async_db
from sqlalchemy import delete
from database.models import Mailing, MailingHistory
from config import ADMIN_IDS

router = Router()

class NightModeSettings(StatesGroup):
    waiting_start_hour = State()
    waiting_end_hour = State()

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    welcome_text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await message.answer(welcome_text, reply_markup=get_main_menu_keyboard())

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    welcome_text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {callback.from_user.first_name}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await callback.message.edit_text(welcome_text, reply_markup=get_main_menu_keyboard())
    await callback.answer()

@router.callback_query(F.data == "night_mode")
async def night_mode_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    status = get_night_mode_status()
    text = f"üåô –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º\n\n{status}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await callback.message.edit_text(text, reply_markup=get_night_mode_keyboard())
    await callback.answer()

@router.callback_query(F.data.startswith("night_mode:"))
async def night_mode_actions(callback: CallbackQuery, state: FSMContext):
    """–î–µ–π—Å—Ç–≤–∏—è —Å –Ω–æ—á–Ω—ã–º —Ä–µ–∂–∏–º–æ–º"""
    action = callback.data.split(":")[1]
    
    if action == "enable":
        result = enable_night_mode()
        await callback.answer(result["message"])
        await night_mode_menu(callback)
    
    elif action == "disable":
        result = disable_night_mode()
        await callback.answer(result["message"])
        await night_mode_menu(callback)
    
    elif action == "settings":
        await callback.message.edit_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∞—Å –Ω–∞—á–∞–ª–∞ –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (0-23):",
            reply_markup=get_back_keyboard()
        )
        await state.set_state(NightModeSettings.waiting_start_hour)
        await callback.answer()

@router.message(NightModeSettings.waiting_start_hour)
async def process_start_hour(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å–∞ –Ω–∞—á–∞–ª–∞ –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    try:
        start_hour = int(message.text)
        if not (0 <= start_hour <= 23):
            await message.answer("‚ùå –ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        await state.update_data(start_hour=start_hour)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (0-23):")
        await state.set_state(NightModeSettings.waiting_end_hour)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 23:")

@router.message(NightModeSettings.waiting_end_hour)
async def process_end_hour(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    try:
        end_hour = int(message.text)
        if not (0 <= end_hour <= 23):
            await message.answer("‚ùå –ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        data = await state.get_data()
        start_hour = data["start_hour"]
        
        from services.night_mode import update_night_mode_settings
        result = update_night_mode_settings(start_hour, end_hour)
        
        await message.answer(result["message"], reply_markup=get_main_menu_keyboard())
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 23:")

@router.callback_query(F.data == "mailing_history")
async def show_mailing_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—ã–ª–æ–∫"""
    history = await mailing_service.get_mailing_history()
    
    if not history:
        text = "üìã –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏\n\n–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞."
    else:
        text = "üìã –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫:\n\n"
        for i, item in enumerate(history, 1):
            text += f"{i}. {item['sent_at']}\n"
            text += f"   –¢–µ–∫—Å—Ç: {item['text']}\n"
            text += f"   –ê–∫–∫–∞—É–Ω—Ç: {item['account_name']}\n"
            text += f"   –ì—Ä—É–ø–ø–∞: {item['group_title']}\n\n"
    
    await callback.message.edit_text(text, reply_markup=get_back_keyboard())
    await callback.answer()

@router.callback_query(F.data == "mailings_list")
async def show_mailings_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
    print(f"üîç –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫ –≤—ã–∑–≤–∞–Ω")
    try:
        mailings = await mailing_service.get_all_mailings()
        print(f"üìã –ü–æ–ª—É—á–µ–Ω–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {len(mailings)}")
        
        if not mailings:
            text = "üìã –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫\n\n–†–∞—Å—Å—ã–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç."
        else:
            text = f"üìã –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫ ({len(mailings)}):\n\n"
            for i, mailing in enumerate(mailings, 1):
                text += f"{i}. {mailing['status']}\n"
                text += f"   –ê–∫–∫–∞—É–Ω—Ç: {mailing['account_name']}\n"
                text += f"   –ì—Ä—É–ø–ø–∞: {mailing['group_title']}\n"
                text += f"   –¢–∏–ø: {mailing['mailing_type']}\n"
                text += f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª: {mailing['min_interval']}-{mailing['max_interval']} –º–∏–Ω\n"
                text += f"   –°–æ–∑–¥–∞–Ω–∞: {mailing['created_at']}\n\n"
        
        await callback.message.edit_text(
            text, 
            reply_markup=get_mailings_list_keyboard(mailings)
        )
        await callback.answer()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_mailings_list: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫")



@router.callback_query(F.data.startswith("mailing_details:"))
async def show_mailing_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    mailing_id = int(callback.data.split(":")[1])
    details = await mailing_service.get_mailing_details(mailing_id)
    
    if not details:
        await callback.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    text = f"üìã –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ #{details['id']}\n\n"
    text += f"–°—Ç–∞—Ç—É—Å: {details['status']}\n"
    text += f"–ê–∫–∫–∞—É–Ω—Ç: {details['account_name']}\n"
    text += f"–ì—Ä—É–ø–ø–∞: {details['group_title']}\n"
    text += f"–¢–∏–ø: {details['mailing_type']}\n"
    text += f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {details['min_interval']}-{details['max_interval']} –º–∏–Ω\n"
    text += f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {details['sent_count']}\n"
    text += f"–°–æ–∑–¥–∞–Ω–∞: {details['created_at']}\n\n"
    text += f"–¢–µ–∫—Å—Ç:\n{details['text']}"
    
    await callback.message.edit_text(
        text, 
        reply_markup=get_mailing_details_keyboard(mailing_id, details['is_active'])
    )
    await callback.answer()

@router.callback_query(F.data.startswith("stop_mailing:"))
async def stop_single_mailing(callback: CallbackQuery):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É"""
    mailing_id = int(callback.data.split(":")[1])
    result = await mailing_service.stop_mailing(mailing_id)
    await callback.answer(result["message"])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    await show_mailing_details(callback)

@router.callback_query(F.data.startswith("start_mailing:"))
async def start_single_mailing(callback: CallbackQuery):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É"""
    mailing_id = int(callback.data.split(":")[1])
    result = await mailing_service.start_mailing(mailing_id)
    await callback.answer(result["message"])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    await show_mailing_details(callback)

@router.callback_query(F.data.startswith("delete_mailing:"))
async def delete_single_mailing(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É"""
    mailing_id = int(callback.data.split(":")[1])
    
    try:
        async with get_async_db() as db:
            # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏
            await db.execute(
                delete(MailingHistory).filter(MailingHistory.mailing_id == mailing_id)
            )
            
            # –£–¥–∞–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            await db.execute(
                delete(Mailing).filter(Mailing.id == mailing_id)
            )
            
            await db.commit()
        
        await callback.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        welcome_text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {callback.from_user.first_name}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        await callback.message.edit_text(welcome_text, reply_markup=get_main_menu_keyboard())
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")

@router.callback_query(F.data == "broadcast_all")
async def broadcast_all_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–æ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã"""
    from handlers.mailing import start_mailing_setup
    await start_mailing_setup(callback, None, True)

@router.callback_query(F.data == "stop_broadcast_all")
async def stop_broadcast_all(callback: CallbackQuery):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    result = await mailing_service.stop_broadcast_all()
    await callback.answer(result["message"])
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    try:
        welcome_text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {callback.from_user.first_name}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        await callback.message.edit_text(welcome_text, reply_markup=get_main_menu_keyboard())
    except Exception as e:
        if "message is not modified" not in str(e):
            raise e 