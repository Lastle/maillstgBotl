import asyncio
import os
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from utils.keyboards import (
    get_main_menu_keyboard, 
    get_group_menu_keyboard, 
    get_back_keyboard,
    get_back_to_account_keyboard,
    get_back_to_groups_keyboard,
    get_account_groups_keyboard,
    get_cancel_keyboard,
    get_back_to_group_keyboard,
    get_photo_attachment_keyboard
)
from services.auth_service import auth_service
from database.models import Account, Group, Mailing
from database.database import get_db
from telethon import TelegramClient
from telethon.errors import ChatAdminRequiredError, FloodWaitError
# API credentials —Ç–µ–ø–µ—Ä—å –±–µ—Ä—É—Ç—Å—è –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞

router = Router()

class GroupManagement(StatesGroup):
    waiting_group_link = State()
    waiting_mailing_text = State()
    waiting_min_interval = State()
    waiting_max_interval = State()
    waiting_photo = State()

@router.callback_query(F.data.startswith("account_groups:"))
async def show_account_groups(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥—Ä—É–ø–ø—ã –∞–∫–∫–∞—É–Ω—Ç–∞"""
    account_id = int(callback.data.split(":")[1])
    
    with next(get_db()) as db:
        account = db.query(Account).filter(Account.id == account_id).first()
        if not account:
            await callback.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        groups = db.query(Group).filter(Group.account_id == account_id).all()
    
    if not groups:
        text = f"üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.phone}:\n\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≥—Ä—É–ø–ø."
        await callback.message.edit_text(text, reply_markup=get_back_to_account_keyboard(account_id))
    else:
        text = f"üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.phone}:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:"
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        groups_data = []
        for group in groups:
            groups_data.append({
                'id': group.id,
                'title': group.title,
                'is_private': group.is_private
            })
        
        await callback.message.edit_text(
            text, 
            reply_markup=get_account_groups_keyboard(groups_data, account_id)
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("update_groups:"))
async def update_groups_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø"""
    account_id = int(callback.data.split(":")[1])
    
    await state.update_data(account_id=account_id)
    
    await callback.message.edit_text(
        "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–∞—Ö...\n\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
        reply_markup=get_back_keyboard()
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø
    await update_groups_for_account(account_id, callback)
    
    await callback.answer()

async def update_groups_for_account(account_id: int, callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—ã –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    start_time = asyncio.get_event_loop().time()
    try:
        with next(get_db()) as db:
            account = db.query(Account).filter(Account.id == account_id).first()
            if not account:
                await callback.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º API credentials –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ
        from config import TELEGRAM_API_ID, TELEGRAM_API_HASH
        api_id = account.api_id if account.api_id and account.api_id != 0 else TELEGRAM_API_ID
        api_hash = account.api_hash if account.api_hash else TELEGRAM_API_HASH
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ (—Å–µ—Å—Å–∏—è —Ç–æ–ª—å–∫–æ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
        session_name = f"session_{account.phone.replace('+', '')}"
        client = TelegramClient(session_name, api_id=api_id, api_hash=api_hash)
        
        await client.connect()
        
        if not await client.is_user_authorized():
            await client.disconnect()
            
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
            import os
            session_file = f"session_{account.phone.replace('+', '')}.session"
            if os.path.exists(session_file):
                try:
                    os.remove(session_file)
                except:
                    pass
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            await callback.message.edit_text(
                f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account.phone} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω\n\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"‚Ä¢ –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞\n"
                f"‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n"
                f"‚Ä¢ –ò–∑–º–µ–Ω–∏–ª–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n\n"
                f"–°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å", callback_data=f"add_account")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–∫–∫–∞—É–Ω—Ç—É", callback_data=f"account_menu:{account_id}")]
                ])
            )
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ (—á–∞—Ç—ã)
        async for dialog in client.iter_dialogs():
            if dialog.is_group or dialog.is_channel:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞, –∞ –Ω–µ –∫–∞–Ω–∞–ª
                try:
                    entity = await client.get_entity(dialog.id)
                    if hasattr(entity, 'megagroup') and entity.megagroup:
                        # –≠—Ç–æ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞
                        group_type = "supergroup"
                    elif hasattr(entity, 'gigagroup') and entity.gigagroup:
                        # –≠—Ç–æ –≥–∏–≥–∞–≥—Ä—É–ø–ø–∞
                        group_type = "gigagroup"
                    else:
                        # –≠—Ç–æ –æ–±—ã—á–Ω–∞—è –≥—Ä—É–ø–ø–∞
                        group_type = "group"
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    try:
                        participants_count = (await client.get_participants(dialog.id, limit=0)).total
                    except:
                        participants_count = 0
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ –±–∞–∑–µ
                    with next(get_db()) as db:
                        existing_group = db.query(Group).filter(
                            Group.group_id == str(dialog.id),
                            Group.account_id == account_id
                        ).first()
                        
                        if existing_group:
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É
                            # –ü–æ–ª—É—á–∞–µ–º username –∏–∑ entity
                            username = None
                            if hasattr(entity, 'username') and entity.username:
                                username = entity.username
                            
                            existing_group.title = dialog.title
                            existing_group.username = username
                            existing_group.member_count = participants_count
                            existing_group.group_type = group_type
                            existing_group.is_private = not bool(username)  # –ü—Ä–∏–≤–∞—Ç–Ω–∞—è –µ—Å–ª–∏ –Ω–µ—Ç username
                        else:
                            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
                            # –ü–æ–ª—É—á–∞–µ–º username –∏–∑ entity
                            username = None
                            if hasattr(entity, 'username') and entity.username:
                                username = entity.username
                            
                            new_group = Group(
                                group_id=str(dialog.id),
                                title=dialog.title,
                                username=username,
                                member_count=participants_count,
                                group_type=group_type,
                                is_private=not bool(username),  # –ü—Ä–∏–≤–∞—Ç–Ω–∞—è –µ—Å–ª–∏ –Ω–µ—Ç username
                                account_id=account_id
                            )
                            db.add(new_group)
                        
                        db.commit()
                        
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã {dialog.title}: {e}")
                    continue
        
        await client.disconnect()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
        with next(get_db()) as db:
            updated_groups = db.query(Group).filter(Group.account_id == account_id).count()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await callback.message.edit_text(
            f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
            f"üìä –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: {updated_groups}\n"
            f"üïê –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {int(asyncio.get_event_loop().time() - start_time)} —Å–µ–∫.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—ã", callback_data=f"account_groups:{account_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–∫–∫–∞—É–Ω—Ç—É", callback_data=f"account_menu:{account_id}")]
            ])
        )
        await callback.answer()
        
    except Exception as e:
        error_msg = str(e)
        if "flood" in error_msg.lower():
            final_msg = "‚ùå –û—à–∏–±–∫–∞: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        elif "unauthorized" in error_msg.lower() or "authorized" in error_msg.lower():
            final_msg = "‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º: —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è."
        elif "timeout" in error_msg.lower():
            final_msg = "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."
        elif "session" in error_msg.lower():
            final_msg = "‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Å—Å–∏–µ–π –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å."
        else:
            final_msg = f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º: {error_msg}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
        await callback.message.edit_text(
            final_msg + "\n\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–∫–∫–∞—É–Ω—Ç—É", callback_data=f"account_menu:{account_id}")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
        await callback.answer()

@router.callback_query(F.data.startswith("group_menu:"))
async def group_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    group_id = int(callback.data.split(":")[1])
    
    with next(get_db()) as db:
        group = db.query(Group).filter(Group.id == group_id).first()
        if not group:
            await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        account = db.query(Account).filter(Account.id == group.account_id).first()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        from database.models import Mailing
        active_mailings = db.query(Mailing).filter(
            Mailing.group_id == group_id,
            Mailing.is_active == True
        ).all()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ
        text = f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ\n\n"
        text += f"üë• –ù–∞–∑–≤–∞–Ω–∏–µ: {group.title}\n"
        text += f"‚úèÔ∏è –Æ–∑–µ—Ä–Ω–µ–π–º: {group.username or '–ù–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞'}\n"
        text += f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {group.member_count}\n"
        text += f"üìÑ –¢–∏–ø: {group.group_type}\n"
        text += f"üÜî ID: {group.group_id}\n\n"
        
        # –°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏
        if active_mailings:
            mailing = active_mailings[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É
            text += f"üìä –°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏: üü¢ –ê–∫—Ç–∏–≤–Ω–∞\n"
            text += f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {mailing.min_interval}-{mailing.max_interval} –º–∏–Ω\n"
            text += f"üìù –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏: {mailing.text[:50] + '...' if len(mailing.text or '') > 50 else mailing.text or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            text += f"üì∑ –§–æ—Ç–æ: {'–ï—Å—Ç—å' if mailing.photo_path else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
        else:
            text += f"üìä –°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏: ‚ùå –ó–∞–∫–æ–Ω—á–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞—á–∞—Ç–∞\n"
            text += f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
            text += f"üìù –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
            text += f"üì∑ –§–æ—Ç–æ: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    
    has_active_mailing = len(active_mailings) > 0
    await callback.message.edit_text(text, reply_markup=get_group_menu_keyboard(group_id, group.account_id, has_active_mailing))
    await callback.answer()

@router.callback_query(F.data.startswith("delete_group:"))
async def delete_group(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç –≥—Ä—É–ø–ø—É"""
    group_id = int(callback.data.split(":")[1])
    
    with next(get_db()) as db:
        group = db.query(Group).filter(Group.id == group_id).first()
        if group:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
            from database.models import Mailing
            active_mailings = db.query(Mailing).filter(
                Mailing.group_id == group_id,
                Mailing.is_active == True
            ).all()
            
            for mailing in active_mailings:
                from services.mailing_service import mailing_service
                await mailing_service.stop_mailing(mailing.id)
            
            # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É
            db.delete(group)
            db.commit()
            
            await callback.answer("‚úÖ –ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞")
        else:
            await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
    await show_account_groups(callback)

@router.callback_query(F.data == "back_to_groups")
async def back_to_groups(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø"""
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫ –∫–∞–∫–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è
    # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    welcome_text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {callback.from_user.first_name}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await callback.message.edit_text(welcome_text, reply_markup=get_main_menu_keyboard())
    await callback.answer() 

@router.callback_query(F.data.startswith("group_mailing_settings:"))
async def group_mailing_settings(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    group_id = int(callback.data.split(":")[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º group_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(group_id=group_id)
    
    await callback.message.edit_text(
        "üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(GroupManagement.waiting_mailing_text)
    await callback.answer()

@router.message(GroupManagement.waiting_mailing_text)
async def process_mailing_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    data = await state.get_data()
    group_id = data["group_id"]
    
    await state.update_data(mailing_text=message.text)
    
    await message.answer(
        "üì∑ –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ?\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=get_photo_attachment_keyboard()
    )
    await state.set_state(GroupManagement.waiting_photo)

@router.callback_query(F.data.startswith("photo_attachment:"))
async def process_photo_attachment(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    attachment_type = callback.data.split(":")[1]
    
    if attachment_type == "text_only":
        await state.update_data(mailing_type="text", photo_path=None)
        await callback.message.edit_text(
            "‚è∞ –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö:",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(GroupManagement.waiting_min_interval)
        await callback.answer()
        
    elif attachment_type == "only_photo":
        await callback.message.edit_text(
            "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:",
            reply_markup=get_cancel_keyboard()
        )
        await state.update_data(mailing_type="photo")
        await state.set_state(GroupManagement.waiting_photo)
        await callback.answer()
        
    elif attachment_type == "with_text":
        await callback.message.edit_text(
            "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º:",
            reply_markup=get_cancel_keyboard()
        )
        await state.update_data(mailing_type="photo_with_text")
        await state.set_state(GroupManagement.waiting_photo)
        await callback.answer()

@router.message(GroupManagement.waiting_photo)
async def process_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
    data = await state.get_data()
    mailing_type = data.get("mailing_type")
    
    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
    photo_path = f"photos/{photo.file_id}.jpg"
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É photos –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    import os
    os.makedirs("photos", exist_ok=True)
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    await message.bot.download(photo, photo_path)
    
    await state.update_data(photo_path=photo_path)
    
    await message.answer(
        "‚è∞ –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(GroupManagement.waiting_min_interval)

@router.message(GroupManagement.waiting_min_interval)
async def process_min_interval(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
    try:
        min_interval = int(message.text)
        if min_interval < 1:
            await message.answer("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1 –º–∏–Ω—É—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        await state.update_data(min_interval=min_interval)
        
        await message.answer(
            "‚è∞ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö:",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(GroupManagement.waiting_max_interval)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

@router.message(GroupManagement.waiting_max_interval)
async def process_max_interval(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
    try:
        max_interval = int(message.text)
        data = await state.get_data()
        min_interval = data["min_interval"]
        
        if max_interval < min_interval:
            await message.answer(f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ {min_interval}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        group_id = data["group_id"]
        mailing_text = data["mailing_text"]
        mailing_type = data.get("mailing_type", "text")
        photo_path = data.get("photo_path")
        
        with next(get_db()) as db:
            group = db.query(Group).filter(Group.id == group_id).first()
            if not group:
                await message.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=get_main_menu_keyboard())
                await state.clear()
                return
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
            old_mailings = db.query(Mailing).filter(
                Mailing.group_id == group_id,
                Mailing.is_active == True
            ).all()
            
            for old_mailing in old_mailings:
                old_mailing.is_active = False
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É
            new_mailing = Mailing(
                account_id=group.account_id,
                group_id=group_id,
                text=mailing_text,
                min_interval=min_interval,
                max_interval=max_interval,
                mailing_type=mailing_type,
                photo_path=photo_path,
                is_active=False  # –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            )
            
            db.add(new_mailing)
            db.commit()
            
            await message.answer(
                f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group.title}\n\n"
                f"üìù –¢–µ–∫—Å—Ç: {mailing_text[:50]}{'...' if len(mailing_text) > 50 else ''}\n"
                f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {min_interval}-{max_interval} –º–∏–Ω\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ '‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É' –≤ –º–µ–Ω—é –≥—Ä—É–ø–ø—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞.",
                reply_markup=get_back_to_group_keyboard(group_id, group.account_id)
            )
            await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

@router.callback_query(F.data.startswith("start_group_mailing:"))
async def start_group_mailing(callback: CallbackQuery):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    group_id = int(callback.data.split(":")[1])
    
    with next(get_db()) as db:
        group = db.query(Group).filter(Group.id == group_id).first()
        if not group:
            await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        mailing = db.query(Mailing).filter(
            Mailing.group_id == group_id,
            Mailing.is_active == True
        ).first()
        
        if not mailing:
            # –ò—â–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É
            mailing = db.query(Mailing).filter(
                Mailing.group_id == group_id,
                Mailing.is_active == False
            ).first()
            
            if not mailing:
                await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã")
                return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        from services.mailing_service import mailing_service
        result = await mailing_service.start_mailing(mailing.id)
        
        await callback.answer(result["message"])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –≥—Ä—É–ø–ø—ã
        await group_menu(callback)

@router.callback_query(F.data.startswith("stop_group_mailing:"))
async def stop_group_mailing(callback: CallbackQuery):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    group_id = int(callback.data.split(":")[1])
    
    with next(get_db()) as db:
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        mailing = db.query(Mailing).filter(
            Mailing.group_id == group_id,
            Mailing.is_active == True
        ).first()
        
        if not mailing:
            await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        from services.mailing_service import mailing_service
        result = await mailing_service.stop_mailing(mailing.id)
        
        await callback.answer(result["message"])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –≥—Ä—É–ø–ø—ã
        await group_menu(callback) 

@router.callback_query(F.data == "cancel_operation")
async def cancel_operation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await state.clear()
    await callback.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    welcome_text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {callback.from_user.first_name}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await callback.message.edit_text(welcome_text, reply_markup=get_main_menu_keyboard()) 

@router.callback_query(F.data.startswith("mailing_status:"))
async def show_mailing_status(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏"""
    group_id = int(callback.data.split(":")[1])
    
    with next(get_db()) as db:
        group = db.query(Group).filter(Group.id == group_id).first()
        if not group:
            await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É
        active_mailing = db.query(Mailing).filter(
            Mailing.group_id == group_id,
            Mailing.is_active == True
        ).first()
        
        if active_mailing:
            # –†–∞—Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
            text = f"üìä –°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {group.title}\n\n"
            text += f"üü¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞\n"
            text += f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {active_mailing.min_interval}-{active_mailing.max_interval} –º–∏–Ω\n"
            text += f"üìù –¢–∏–ø: {active_mailing.mailing_type}\n"
            text += f"üìù –¢–µ–∫—Å—Ç: {active_mailing.text[:100]}{'...' if len(active_mailing.text or '') > 100 else ''}\n"
            if active_mailing.photo_path:
                text += f"üì∑ –§–æ—Ç–æ: –ï—Å—Ç—å\n"
            else:
                text += f"üì∑ –§–æ—Ç–æ: –ù–µ—Ç\n"
            text += f"üïê –°–æ–∑–¥–∞–Ω–∞: {active_mailing.created_at.strftime('%d.%m.%Y %H:%M')}"
        else:
            # –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
            inactive_mailing = db.query(Mailing).filter(
                Mailing.group_id == group_id,
                Mailing.is_active == False
            ).first()
            
            text = f"üìä –°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {group.title}\n\n"
            text += f"üî¥ –°—Ç–∞—Ç—É—Å: –ù–µ–∞–∫—Ç–∏–≤–Ω–∞\n"
            
            if inactive_mailing:
                text += f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {inactive_mailing.min_interval}-{inactive_mailing.max_interval} –º–∏–Ω\n"
                text += f"üìù –¢–∏–ø: {inactive_mailing.mailing_type}\n"
                text += f"üìù –¢–µ–∫—Å—Ç: {inactive_mailing.text[:100]}{'...' if len(inactive_mailing.text or '') > 100 else ''}\n"
                if inactive_mailing.photo_path:
                    text += f"üì∑ –§–æ—Ç–æ: –ï—Å—Ç—å\n"
                else:
                    text += f"üì∑ –§–æ—Ç–æ: –ù–µ—Ç\n"
                text += f"üïê –°–æ–∑–¥–∞–Ω–∞: {inactive_mailing.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                text += f"üí° –ù–∞–∂–º–∏—Ç–µ '‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É' –¥–ª—è –∑–∞–ø—É—Å–∫–∞"
            else:
                text += f"‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞\n\n"
                text += f"üí° –ù–∞–∂–º–∏—Ç–µ 'üìù –¢–µ–∫—Å—Ç –∏ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏' –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    
    await callback.message.edit_text(
        text, 
        reply_markup=get_back_to_group_keyboard(group_id, group.account_id)
    )
    await callback.answer() 