from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import os

from utils.keyboards import (
    get_main_menu_keyboard, get_mailing_type_keyboard, 
    get_photo_attachment_keyboard, get_back_keyboard
)
from services.mailing_service import mailing_service
from database.models import Account, Group, Mailing
from database.database import get_db, next_get_db
from config import ADMIN_IDS, MAX_PHOTO_SIZE

router = Router()

class MailingSetup(StatesGroup):
    waiting_text = State()
    waiting_min_interval = State()
    waiting_max_interval = State()
    waiting_photo_choice = State()
    waiting_photo = State()

@router.callback_query(F.data.startswith("start_mailing_all:"))
async def start_mailing_all(callback: CallbackQuery):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤–æ –≤—Å–µ –≥—Ä—É–ø–ø—ã –∞–∫–∫–∞—É–Ω—Ç–∞"""
    account_id = int(callback.data.split(":")[1])
    await start_mailing_setup(callback, account_id, False)

async def start_mailing_setup(callback: CallbackQuery, account_id: int = None, broadcast_all: bool = False):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.message.edit_text(
        "üìß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏:",
        reply_markup=get_mailing_type_keyboard()
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    await callback.answer()
    return

@router.callback_query(F.data.startswith("mailing_type:"))
async def process_mailing_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    mailing_type = callback.data.split(":")[1]
    
    await state.update_data(mailing_type=mailing_type)
    
    await callback.message.edit_text(
        "üìù –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, –ø–æ—Ç–æ–º —Å–ø—Ä–æ—à—É –≥—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞:",
        reply_markup=get_back_keyboard()
    )
    await state.set_state(MailingSetup.waiting_text)
    await callback.answer()

@router.message(MailingSetup.waiting_text)
async def process_mailing_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    text = message.text.strip()
    
    if not text:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    await state.update_data(text=text)
    
    data = await state.get_data()
    mailing_type = data.get("mailing_type")
    
    if mailing_type == "fixed":
        await message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö:")
        await state.set_state(MailingSetup.waiting_min_interval)
    else:  # random
        await message.answer("‚è∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω):")
        await state.set_state(MailingSetup.waiting_min_interval)

@router.message(MailingSetup.waiting_min_interval)
async def process_min_interval(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
    try:
        min_interval = int(message.text)
        if min_interval <= 0:
            await message.answer("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        await state.update_data(min_interval=min_interval)
        
        data = await state.get_data()
        mailing_type = data.get("mailing_type")
        
        if mailing_type == "fixed":
            # –î–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª
            await state.update_data(max_interval=min_interval)
            await message.answer(
                "üì∑ –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é?",
                reply_markup=get_photo_attachment_keyboard()
            )
            await state.set_state(MailingSetup.waiting_photo_choice)
        else:  # random
            await message.answer("‚è∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω):")
            await state.set_state(MailingSetup.waiting_max_interval)
            
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()

@router.message(MailingSetup.waiting_max_interval)
async def process_max_interval(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
    try:
        max_interval = int(message.text)
        if max_interval <= 0:
            await message.answer("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        data = await state.get_data()
        min_interval = data.get("min_interval")
        
        if max_interval < min_interval:
            await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        await state.update_data(max_interval=max_interval)
        
        await message.answer(
            "üì∑ –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é?",
            reply_markup=get_photo_attachment_keyboard()
        )
        await state.set_state(MailingSetup.waiting_photo_choice)
            
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()



@router.callback_query(F.data.startswith("photo_attachment:"))
async def process_photo_attachment(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
    attachment_type = callback.data.split(":")[1]
    
    if attachment_type == "text_only":
        await state.update_data(photo_path=None, mailing_type="text")
        await start_mailing(callback, state)
        return  # –í–∞–∂–Ω–æ! –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å callback.answer()
    elif attachment_type == "only_photo":
        await callback.message.edit_text(
            "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:",
            reply_markup=get_back_keyboard()
        )
        await state.set_state(MailingSetup.waiting_photo)
        await state.update_data(photo_type="only_photo")
    elif attachment_type == "with_text":
        await callback.message.edit_text(
            "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:",
            reply_markup=get_back_keyboard()
        )
        await state.set_state(MailingSetup.waiting_photo)
        await state.update_data(photo_type="with_text")
    
    await callback.answer()

@router.message(MailingSetup.waiting_photo, F.photo)
async def process_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
    photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
    
    if photo.file_size > MAX_PHOTO_SIZE:
        await message.answer(f"‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_PHOTO_SIZE // (1024*1024)}MB")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("photos", exist_ok=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    photo_path = f"photos/{photo.file_id}.jpg"
    await message.bot.download(photo, photo_path)
    
    data = await state.get_data()
    photo_type = data.get("photo_type")
    
    if photo_type == "only_photo":
        await state.update_data(photo_path=photo_path, mailing_type="photo")
    else:  # with_text
        await state.update_data(photo_path=photo_path, mailing_type="photo_with_text")
    
    await start_mailing(message, state)

async def start_mailing(callback_or_message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É"""
    data = await state.get_data()
    
    text = data.get("text")
    mailing_type = data.get("mailing_type")
    min_interval = data.get("min_interval")
    max_interval = data.get("max_interval")
    photo_path = data.get("photo_path")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    interval_type = "fixed" if min_interval == max_interval else "random"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    result = await mailing_service.start_broadcast_all(
        text=text,
        mailing_type=mailing_type,
        interval_type=interval_type,
        min_interval=min_interval,
        max_interval=max_interval,
        photo_path=photo_path
    )
    
    if result["success"]:
        interval_text = f"–∫–∞–∂–¥—ã–µ {min_interval} –º–∏–Ω" if interval_type == "fixed" else f"—Å–ª—É—á–∞–π–Ω–æ –∫–∞–∂–¥—ã–µ {min_interval}-{max_interval} –º–∏–Ω"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
        from services.night_mode import get_night_mode_settings
        night_settings = get_night_mode_settings()
        night_info = ""
        if night_settings["is_enabled"]:
            night_info = f"\nüåô –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º: –í–ö–õ ({night_settings['start_hour']}:00-{night_settings['end_hour']}:00, x{night_settings['multiplier']})"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if hasattr(callback_or_message, 'message'):
            # –≠—Ç–æ callback_query - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback_or_message.message.edit_text(
                f"‚úÖ {result['message']}\n\n"
                f"üìù –¢–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏: {mailing_type}\n"
                f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_text}\n"
                f"üîÑ –†–∞—Å—Å—ã–ª–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ\n"
                f"üìä –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∏—Å—Ç–æ—Ä–∏–µ–π —Ä–∞—Å—Å—ã–ª–æ–∫{night_info}",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            # –≠—Ç–æ message - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback_or_message.answer(
                f"‚úÖ {result['message']}\n\n"
                f"üìù –¢–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏: {mailing_type}\n"
                f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_text}\n"
                f"üîÑ –†–∞—Å—Å—ã–ª–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ\n"
                f"üìä –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∏—Å—Ç–æ—Ä–∏–µ–π —Ä–∞—Å—Å—ã–ª–æ–∫{night_info}",
                reply_markup=get_main_menu_keyboard()
            )
    else:
        await callback_or_message.answer(
            f"‚ùå {result['error']}",
            reply_markup=get_main_menu_keyboard()
        )
    
    await state.clear()

@router.callback_query(F.data.startswith("stop_mailing_all:"))
async def stop_mailing_all(callback: CallbackQuery):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞"""
    account_id = int(callback.data.split(":")[1])
    
    with next_get_db() as db:
        active_mailings = db.query(Mailing).filter(
            Mailing.account_id == account_id,
            Mailing.is_active == True
        ).all()
        
        stopped_count = 0
        for mailing in active_mailings:
            result = await mailing_service.stop_mailing(mailing.id)
            if result["success"]:
                stopped_count += 1
    
    await callback.answer(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {stopped_count} —Ä–∞—Å—Å—ã–ª–æ–∫")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞
    from handlers.accounts import account_menu
    await account_menu(callback) 