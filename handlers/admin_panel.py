import asyncio
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from telethon import TelegramClient
from telethon.errors import FloodWaitError, ChatAdminRequiredError

from config import ADMIN_IDS, TELEGRAM_API_ID, TELEGRAM_API_HASH
from database.database import get_db, next_get_db, SessionLocal
from database.models import Account, Group, MessageLog, Mailing
from utils.keyboards import get_main_menu_keyboard, get_back_keyboard, get_persistent_keyboard, get_group_selection_keyboard, get_text_variants_keyboard

router = Router()

class AdminSpamStates(StatesGroup):
    waiting_message = State()
    waiting_mass_message = State()
    selecting_groups = State()
    waiting_text_variants = State()
    waiting_text_variant = State()
    selecting_text_count = State()

@router.callback_query(F.data == "admin_panel")
async def admin_panel_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    db = SessionLocal()
    try:
        total_accounts = db.query(Account).count()
        active_mailings = db.query(Mailing).filter(Mailing.status == 'running').count()
        
        text = (
            "üîß **–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨**\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"   ‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_accounts}\n"
            f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫: {active_mailings}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
    finally:
        db.close()
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üì± –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏ –Ω–æ–º–µ—Ä–∞", callback_data="admin_all_accounts"))
    builder.add(InlineKeyboardButton(text="üéØ –ú–∞—Å—Å–æ–≤—ã–π —Å–ø–∞–º –ø–æ –≥—Ä—É–ø–ø–∞–º", callback_data="admin_mass_spam"))
    builder.add(InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="admin_stats"))
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    builder.adjust(1)
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "admin_all_accounts")
async def show_all_accounts(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    db = SessionLocal()
    try:
        accounts = db.query(Account).all()
        
        if not accounts:
            text = "üì± **–í–°–ï –ê–ö–ö–ê–£–ù–¢–´**\n\n–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ—Ç."
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel"))
            await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="Markdown")
            await callback.answer()
            return
        
        text = "üì± **–í–°–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ù–´–ï –ê–ö–ö–ê–£–ù–¢–´**\n\n"
        
        builder = InlineKeyboardBuilder()
        
        for i, account in enumerate(accounts, 1):
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            groups_count = get_account_groups_count(account.id)
            
            account_info = (
                f"{i}. **{account.name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}**\n"
                f"   üìû –ù–æ–º–µ—Ä: `{account.phone}`\n"
                f"   üÜî ID: `{account.tg_id}`\n"
                f"   üèòÔ∏è –ì—Ä—É–ø–ø: {groups_count}\n"
            )
            text += account_info + "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            builder.add(InlineKeyboardButton(
                text=f"üìã {account.phone} ({groups_count} –≥—Ä—É–ø–ø)", 
                callback_data=f"admin_account_details:{account.id}"
            ))
        
        builder.add(InlineKeyboardButton(text="üéØ –ú–∞—Å—Å–æ–≤—ã–π —Å–ø–∞–º", callback_data="admin_mass_spam"))
        builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="Markdown")
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    finally:
        db.close()

@router.callback_query(F.data.startswith("admin_account_details:"))
async def show_account_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –µ–≥–æ –≥—Ä—É–ø–ø—ã"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    account_id = int(callback.data.split(":")[1])
    
    with next_get_db() as db:
        account = db.query(Account).filter(Account.id == account_id).first()
        if not account:
            await callback.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        groups = db.query(Group).filter(Group.account_id == account_id).all()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã
    group_count = len([g for g in groups if g.type == 'group'])
    channel_count = len([g for g in groups if g.type == 'channel'])
    
    text = (
        f"üì± **–ê–ö–ö–ê–£–ù–¢: {account.name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}**\n\n"
        f"üìû –ù–æ–º–µ—Ä: `{account.phone}`\n"
        f"üÜî Telegram ID: `{account.tg_id}`\n"
        f"üèòÔ∏è –ì—Ä—É–ø–ø: {group_count} | –ö–∞–Ω–∞–ª–æ–≤: {channel_count}\n"
        f"üìä –í—Å–µ–≥–æ: {len(groups)}\n\n"
    )
    
    if groups:
        text += "**–ì–†–£–ü–ü–´ –ò –ö–ê–ù–ê–õ–´:**\n"
        for i, group in enumerate(groups[:15], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15 –≥—Ä—É–ø–ø
            group_type = "üì¢" if group.type == 'channel' else "üë•"
            group_name = group.name[:25] + "..." if len(group.name) > 25 else group.name
            text += f"{i}. {group_type} {group_name}\n"
            text += f"   ID: `{group.tg_id}`\n"
        
        if len(groups) > 15:
            text += f"\n... –∏ –µ—â–µ {len(groups) - 15} –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤"
    else:
        text += "‚ùå –ì—Ä—É–ø–ø –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text=f"üöÄ –°–ø–∞–º —Å {account.phone}", 
        callback_data=f"admin_spam_from:{account_id}"
    ))
    builder.add(InlineKeyboardButton(
        text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø", 
        callback_data=f"admin_update_groups:{account_id}"
    ))
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–∫–∫–∞—É–Ω—Ç–∞–º", callback_data="admin_all_accounts"))
    builder.adjust(1)
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data.startswith("admin_update_groups:"))
async def update_account_groups(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    account_id = int(callback.data.split(":")[1])
    
    with next_get_db() as db:
        account = db.query(Account).filter(Account.id == account_id).first()
        if not account:
            await callback.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
    
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø...")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã
        client = TelegramClient(account.session_path, TELEGRAM_API_ID, TELEGRAM_API_HASH)
        await client.connect()
        
        if await client.is_user_authorized():
            # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥–∏
            dialogs = await client.get_dialogs()
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≥—Ä—É–ø–ø—ã
            with next_get_db() as db:
                db.query(Group).filter(Group.account_id == account_id).delete()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã
                groups_count = 0
                channels_count = 0
                
                for dialog in dialogs:
                    if dialog.is_group or dialog.is_channel:
                        group_type = 'group' if dialog.is_group else 'channel'
                        
                        group = Group(
                            account_id=account_id,
                            tg_id=str(dialog.id),
                            name=dialog.name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                            type=group_type
                        )
                        db.add(group)
                        
                        if dialog.is_group:
                            groups_count += 1
                        else:
                            channels_count += 1
                
                db.commit()
            
            await client.disconnect()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await show_account_details(callback)
            
        else:
            await callback.message.edit_text(
                f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account.name} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Telegram",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_account_details:{account_id}")
                ]])
            )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_account_details:{account_id}")
            ]])
        )

@router.callback_query(F.data.startswith("admin_spam_from:"))
async def start_spam_from_account(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    account_id = int(callback.data.split(":")[1])
    
    with next_get_db() as db:
        account = db.query(Account).filter(Account.id == account_id).first()
        groups_count = db.query(Group).filter(Group.account_id == account_id).count()
    
    if not account:
        await callback.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await state.update_data(selected_account_id=account_id)
    
    text = (
        f"üöÄ **–ù–ê–°–¢–†–û–ô–ö–ê –†–ê–°–°–´–õ–ö–ò**\n"
        f"üìû –ê–∫–∫–∞—É–Ω—Ç: {account.phone}\n"
        f"üèòÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ –≥—Ä—É–ø–ø: {groups_count}\n\n"
        f"üìù **–®–∞–≥ 1:** –°–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?\n\n"
        f"üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∞:** –ù–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞ –ø–æ–º–æ–≥–∞—é—Ç –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ –¥–µ–ª–∞—é—Ç —Ä–∞—Å—Å—ã–ª–∫—É –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π."
    )
    
    await callback.message.edit_text(text, reply_markup=get_text_variants_keyboard(), parse_mode="Markdown")
    await state.set_state(AdminSpamStates.selecting_text_count)
    await callback.answer()

@router.callback_query(F.data.startswith("text_variants:"))
async def select_text_variants(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    variants_count = int(callback.data.split(":")[1])
    await state.update_data(text_variants_count=variants_count, text_variants=[], current_variant=1)
    
    data = await state.get_data()
    account_id = data.get('selected_account_id')
    
    with next_get_db() as db:
        account = db.query(Account).filter(Account.id == account_id).first()
    
    text = (
        f"üìù **–í–í–û–î –¢–ï–ö–°–¢–û–í –î–õ–Ø –†–ê–°–°–´–õ–ö–ò**\n"
        f"üìû –ê–∫–∫–∞—É–Ω—Ç: {account.phone}\n\n"
        f"üìÑ **–í–∞—Ä–∏–∞–Ω—Ç 1 –∏–∑ {variants_count}**\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel"))
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="Markdown")
    await state.set_state(AdminSpamStates.waiting_text_variant)
    await callback.answer()

@router.message(AdminSpamStates.waiting_text_variant)
async def process_text_variant(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–µ–∫—Å—Ç–∞"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    data = await state.get_data()
    text_variants = data.get('text_variants', [])
    current_variant = data.get('current_variant', 1)
    variants_count = data.get('text_variants_count', 1)
    account_id = data.get('selected_account_id')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
    text_variants.append(message.text)
    
    if current_variant < variants_count:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
        next_variant = current_variant + 1
        await state.update_data(text_variants=text_variants, current_variant=next_variant)
        
        with next_get_db() as db:
            account = db.query(Account).filter(Account.id == account_id).first()
        
        text = (
            f"üìù **–í–í–û–î –¢–ï–ö–°–¢–û–í –î–õ–Ø –†–ê–°–°–´–õ–ö–ò**\n"
            f"üìû –ê–∫–∫–∞—É–Ω—Ç: {account.phone}\n\n"
            f"üìÑ **–í–∞—Ä–∏–∞–Ω—Ç {next_variant} –∏–∑ {variants_count}**\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:"
        )
        
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel"))
        
        await message.answer(text, reply_markup=builder.as_markup(), parse_mode="Markdown")
    else:
        # –í—Å–µ —Ç–µ–∫—Å—Ç—ã –≤–≤–µ–¥–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø
        await state.update_data(text_variants=text_variants)
        await show_group_selection(message, state, account_id)

async def show_group_selection(message, state: FSMContext, account_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø"""
    with next_get_db() as db:
        account = db.query(Account).filter(Account.id == account_id).first()
        groups = db.query(Group).filter(Group.account_id == account_id).all()
    
    if not groups:
        await message.answer(
            f"‚ùå **–ù–ï–¢ –ì–†–£–ü–ü**\n\n"
            f"üìû –ê–∫–∫–∞—É–Ω—Ç: {account.phone}\n"
            f"üèòÔ∏è –£ —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
            f"–°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.",
            reply_markup=get_persistent_keyboard(),
            parse_mode="Markdown"
        )
        await state.clear()
        return
    
    data = await state.get_data()
    text_variants = data.get('text_variants', [])
    
    text = (
        f"üéØ **–í–´–ë–û–† –ì–†–£–ü–ü –î–õ–Ø –†–ê–°–°–´–õ–ö–ò**\n"
        f"üìû –ê–∫–∫–∞—É–Ω—Ç: {account.phone}\n"
        f"üìù –í–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞: {len(text_variants)}\n"
        f"üèòÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ –≥—Ä—É–ø–ø: {len(groups)}\n\n"
        f"‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
        f"(–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≥—Ä—É–ø–ø—É —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å/—Å–Ω—è—Ç—å)"
    )
    
    await message.answer(
        text, 
        reply_markup=get_group_selection_keyboard(groups, set(), account_id),
        parse_mode="Markdown"
    )
    await state.set_state(AdminSpamStates.selecting_groups)

@router.callback_query(F.data.startswith("toggle_group:"))
async def toggle_group_selection(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã (—á–µ–∫–±–æ–∫—Å)"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    parts = callback.data.split(":")
    group_id = int(parts[1])
    account_id = int(parts[2])
    
    data = await state.get_data()
    selected_groups = set(data.get('selected_groups', []))
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
    if group_id in selected_groups:
        selected_groups.remove(group_id)
    else:
        selected_groups.add(group_id)
    
    await state.update_data(selected_groups=list(selected_groups))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    with next_get_db() as db:
        groups = db.query(Group).filter(Group.account_id == account_id).all()
        account = db.query(Account).filter(Account.id == account_id).first()
    
    text_variants = data.get('text_variants', [])
    text = (
        f"üéØ **–í–´–ë–û–† –ì–†–£–ü–ü –î–õ–Ø –†–ê–°–°–´–õ–ö–ò**\n"
        f"üìû –ê–∫–∫–∞—É–Ω—Ç: {account.phone}\n"
        f"üìù –í–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞: {len(text_variants)}\n"
        f"üèòÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ –≥—Ä—É–ø–ø: {len(groups)}\n"
        f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –≥—Ä—É–ø–ø: {len(selected_groups)}\n\n"
        f"‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
        f"(–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≥—Ä—É–ø–ø—É —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å/—Å–Ω—è—Ç—å)"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_group_selection_keyboard(groups, selected_groups, account_id),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("select_all_groups:"))
async def select_all_groups(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–∏—Ä–∞–µ—Ç –≤—Å–µ –≥—Ä—É–ø–ø—ã"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    account_id = int(callback.data.split(":")[1])
    
    with next_get_db() as db:
        groups = db.query(Group).filter(Group.account_id == account_id).all()
        account = db.query(Account).filter(Account.id == account_id).first()
    
    selected_groups = {group.id for group in groups}
    await state.update_data(selected_groups=list(selected_groups))
    
    data = await state.get_data()
    text_variants = data.get('text_variants', [])
    
    text = (
        f"üéØ **–í–´–ë–û–† –ì–†–£–ü–ü –î–õ–Ø –†–ê–°–°–´–õ–ö–ò**\n"
        f"üìû –ê–∫–∫–∞—É–Ω—Ç: {account.phone}\n"
        f"üìù –í–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞: {len(text_variants)}\n"
        f"üèòÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ –≥—Ä—É–ø–ø: {len(groups)}\n"
        f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –≥—Ä—É–ø–ø: {len(selected_groups)} (–í–°–ï)\n\n"
        f"‚úÖ –í—Å–µ –≥—Ä—É–ø–ø—ã –≤—ã–±—Ä–∞–Ω—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!"
    )
    
    try:
        await callback.message.edit_text(
            text,
            reply_markup=get_group_selection_keyboard(groups, selected_groups, account_id),
            parse_mode="Markdown"
        )
    except Exception as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        pass
    await callback.answer("‚úÖ –í—Å–µ –≥—Ä—É–ø–ø—ã –≤—ã–±—Ä–∞–Ω—ã!")

@router.callback_query(F.data.startswith("deselect_all_groups:"))
async def deselect_all_groups(callback: CallbackQuery, state: FSMContext):
    """–°–Ω–∏–º–∞–µ—Ç –≤—ã–±–æ—Ä —Å–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    account_id = int(callback.data.split(":")[1])
    
    with next_get_db() as db:
        groups = db.query(Group).filter(Group.account_id == account_id).all()
        account = db.query(Account).filter(Account.id == account_id).first()
    
    selected_groups = set()
    await state.update_data(selected_groups=list(selected_groups))
    
    data = await state.get_data()
    text_variants = data.get('text_variants', [])
    
    text = (
        f"üéØ **–í–´–ë–û–† –ì–†–£–ü–ü –î–õ–Ø –†–ê–°–°–´–õ–ö–ò**\n"
        f"üìû –ê–∫–∫–∞—É–Ω—Ç: {account.phone}\n"
        f"üìù –í–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞: {len(text_variants)}\n"
        f"üèòÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ –≥—Ä—É–ø–ø: {len(groups)}\n"
        f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –≥—Ä—É–ø–ø: 0\n\n"
        f"‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
        f"(–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≥—Ä—É–ø–ø—É —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å/—Å–Ω—è—Ç—å)"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_group_selection_keyboard(groups, selected_groups, account_id),
        parse_mode="Markdown"
    )
    await callback.answer("‚ùå –í—ã–±–æ—Ä —Å–Ω—è—Ç —Å–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø")

@router.callback_query(F.data.startswith("confirm_selected_groups:"))
async def confirm_selected_groups(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    account_id = int(callback.data.split(":")[1])
    data = await state.get_data()
    selected_groups = data.get('selected_groups', [])
    text_variants = data.get('text_variants', [])
    
    if not selected_groups:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥—Ä—É–ø–ø—É!", show_alert=True)
        return
    
    if not text_variants:
        await callback.answer("‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!", show_alert=True)
        return
    
    with next_get_db() as db:
        account = db.query(Account).filter(Account.id == account_id).first()
        groups = db.query(Group).filter(Group.id.in_(selected_groups)).all()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    text = (
        f"üöÄ **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –†–ê–°–°–´–õ–ö–ò**\n\n"
        f"üìû **–ê–∫–∫–∞—É–Ω—Ç:** {account.phone}\n"
        f"üìù **–í–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞:** {len(text_variants)}\n"
        f"üéØ **–í—ã–±—Ä–∞–Ω–æ –≥—Ä—É–ø–ø:** {len(selected_groups)}\n\n"
        f"üìÑ **–¢–µ–∫—Å—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:**\n"
    )
    
    for i, variant in enumerate(text_variants, 1):
        preview = variant[:50] + "..." if len(variant) > 50 else variant
        text += f"{i}. `{preview}`\n"
    
    text += f"\nüèòÔ∏è **–ì—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:**\n"
    for i, group in enumerate(groups[:5], 1):
        text += f"{i}. {group.name[:30]}...\n"
    
    if len(groups) > 5:
        text += f"... –∏ –µ—â—ë {len(groups) - 5} –≥—Ä—É–ø–ø\n"
    
    text += f"\n‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ {len(selected_groups)} –≥—Ä—É–ø–ø —Å —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–µ–π —Ç–µ–∫—Å—Ç–æ–≤.\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—É—Å–∫:"
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text=f"üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨ –†–ê–°–°–´–õ–ö–£", 
        callback_data=f"execute_custom_spam:{account_id}"
    ))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel"))
    builder.adjust(1)
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data.startswith("execute_custom_spam:"))
async def execute_custom_spam(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç–∞–º–∏"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    account_id = int(callback.data.split(":")[1])
    data = await state.get_data()
    selected_groups = data.get('selected_groups', [])
    text_variants = data.get('text_variants', [])
    
    with next_get_db() as db:
        account = db.query(Account).filter(Account.id == account_id).first()
    
    await callback.message.edit_text(
        f"üöÄ **–ó–ê–ü–£–°–ö –ö–ê–°–¢–û–ú–ù–û–ô –†–ê–°–°–´–õ–ö–ò**\n\n"
        f"üìû –ê–∫–∫–∞—É–Ω—Ç: {account.phone}\n"
        f"üìù –í–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞: {len(text_variants)}\n"
        f"üéØ –ì—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {len(selected_groups)}\n\n"
        f"‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏...",
        parse_mode="Markdown"
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(execute_custom_spam_campaign(account, text_variants, selected_groups, callback.message))
    await state.clear()
    await callback.answer("üöÄ –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")

@router.message(AdminSpamStates.waiting_message)
async def process_spam_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    data = await state.get_data()
    account_id = data.get('selected_account_id')
    
    if not account_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
        await state.clear()
        return
    
    spam_text = message.text
    await state.update_data(spam_text=spam_text)
    
    with next_get_db() as db:
        account = db.query(Account).filter(Account.id == account_id).first()
        if not account:
            await message.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        groups = db.query(Group).filter(Group.account_id == account_id).all()
    
    text = (
        f"üìù **–¢–ï–ö–°–¢ –†–ê–°–°–´–õ–ö–ò:**\n"
        f"```\n{spam_text[:200]}{'...' if len(spam_text) > 200 else ''}\n```\n\n"
        f"üìû **–ê–∫–∫–∞—É–Ω—Ç:** {account.phone}\n"
        f"üèòÔ∏è **–î–æ—Å—Ç—É–ø–Ω–æ –≥—Ä—É–ø–ø:** {len(groups)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    builder = InlineKeyboardBuilder()
    if groups:
        builder.add(InlineKeyboardButton(
            text=f"üéØ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ –í–°–ï {len(groups)} –≥—Ä—É–ø–ø", 
            callback_data=f"admin_spam_all:{account_id}"
        ))
        builder.add(InlineKeyboardButton(
            text="üìã –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—ã –≤—Ä—É—á–Ω—É—é", 
            callback_data=f"admin_select_groups:{account_id}"
        ))
    else:
        builder.add(InlineKeyboardButton(
            text="üîÑ –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø", 
            callback_data=f"admin_update_groups:{account_id}"
        ))
    
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel"))
    builder.adjust(1)
    
    await message.answer(text, reply_markup=builder.as_markup(), parse_mode="Markdown")

@router.callback_query(F.data.startswith("admin_spam_all:"))
async def spam_to_all_groups(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤–æ –≤—Å–µ –≥—Ä—É–ø–ø—ã –∞–∫–∫–∞—É–Ω—Ç–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    account_id = int(callback.data.split(":")[1])
    data = await state.get_data()
    spam_text = data.get('spam_text')
    
    if not spam_text:
        await callback.answer("‚ùå –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    db = SessionLocal()
    try:
        account = db.query(Account).filter(Account.id == account_id).first()
        
        if not account:
            await callback.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {str(e)}", show_alert=True)
        return
    finally:
        db.close()
    
    await callback.message.edit_text(
        f"üöÄ **–ó–ê–ü–£–°–ö –†–ê–°–°–´–õ–ö–ò**\n\n"
        f"üìû –ê–∫–∫–∞—É–Ω—Ç: {account.phone}\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {spam_text[:100]}...\n\n"
        f"‚è≥ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...",
        parse_mode="Markdown"
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(execute_spam_campaign(account, spam_text, callback.message))
    await state.clear()
    await callback.answer("üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")

@router.callback_query(F.data == "admin_mass_spam")
async def mass_spam_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–ø–∞–º–∞ —Å–æ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    db = SessionLocal()
    try:
        accounts = db.query(Account).all()
        
        if not accounts:
            await callback.answer("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤", show_alert=True)
            return
        
        total_groups = 0
        for account in accounts:
            groups_count = await get_account_groups_count(account.phone)
            total_groups += groups_count
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {str(e)}", show_alert=True)
        return
    finally:
        db.close()
    
    text = (
        f"üéØ **–ú–ê–°–°–û–í–´–ô –°–ü–ê–ú**\n\n"
        f"üì± –î–æ—Å—Ç—É–ø–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}\n"
        f"üèòÔ∏è –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø: {total_groups}\n\n"
        "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –ú–∞—Å—Å–æ–≤—ã–π —Å–ø–∞–º –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text=f"üöÄ –°–ø–∞–º —Å–æ –í–°–ï–• –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ({total_groups} –≥—Ä—É–ø–ø)", 
        callback_data="admin_mass_spam_all"
    ))
    builder.add(InlineKeyboardButton(text="üìã –í—ã–±—Ä–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data="admin_select_accounts"))
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    builder.adjust(1)
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "admin_mass_spam_all")
async def start_mass_spam_all(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    with next_get_db() as db:
        accounts = db.query(Account).all()
        total_groups = db.query(Group).count()
    
    if not accounts:
        await callback.answer("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤", show_alert=True)
        return
    
    text = (
        f"üéØ **–ú–ê–°–°–û–í–ê–Ø –†–ê–°–°–´–õ–ö–ê –°–û –í–°–ï–• –ê–ö–ö–ê–£–ù–¢–û–í**\n\n"
        f"üì± –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}\n"
        f"üèòÔ∏è –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø: {total_groups}\n\n"
        f"‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –≠—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –í–°–ï –≥—Ä—É–ø–ø—ã —Å–æ –í–°–ï–• –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel"))
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="Markdown")
    await state.set_state(AdminSpamStates.waiting_mass_message)
    await callback.answer()

@router.message(AdminSpamStates.waiting_mass_message)
async def process_mass_spam_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    spam_text = message.text
    
    with next_get_db() as db:
        accounts = db.query(Account).all()
        total_groups = db.query(Group).count()
    
    text = (
        f"üìù **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ú–ê–°–°–û–í–û–ô –†–ê–°–°–´–õ–ö–ò**\n\n"
        f"```\n{spam_text[:200]}{'...' if len(spam_text) > 200 else ''}\n```\n\n"
        f"üì± –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}\n"
        f"üèòÔ∏è –ì—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {total_groups}\n\n"
        f"‚ö†Ô∏è **–ü–û–°–õ–ï–î–ù–ï–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï!**\n"
        f"–≠—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –í–°–ï {total_groups} –≥—Ä—É–ø–ø —Å–æ –í–°–ï–• {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤!\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text=f"üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨ –ú–ê–°–°–û–í–£–Æ –†–ê–°–°–´–õ–ö–£", 
        callback_data="confirm_mass_spam"
    ))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel"))
    builder.adjust(1)
    
    await state.update_data(mass_spam_text=spam_text)
    await message.answer(text, reply_markup=builder.as_markup(), parse_mode="Markdown")

@router.callback_query(F.data == "confirm_mass_spam")
async def execute_mass_spam(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    data = await state.get_data()
    spam_text = data.get('mass_spam_text')
    
    if not spam_text:
        await callback.answer("‚ùå –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    with next_get_db() as db:
        accounts = db.query(Account).all()
    
    if not accounts:
        await callback.answer("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤", show_alert=True)
        return
    
    await callback.message.edit_text(
        f"üöÄ **–ó–ê–ü–£–°–ö –ú–ê–°–°–û–í–û–ô –†–ê–°–°–´–õ–ö–ò**\n\n"
        f"üì± –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {spam_text[:100]}...\n\n"
        f"‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ...\n\n"
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.",
        parse_mode="Markdown"
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    asyncio.create_task(execute_mass_spam_campaign(accounts, spam_text, callback.message))
    await state.clear()
    await callback.answer("üöÄ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")

@router.callback_query(F.data == "admin_stats")
async def show_admin_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–æ–∫"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    with next_get_db() as db:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_accounts = db.query(Account).count()
        total_groups = db.query(Group).count()
        total_messages = db.query(MessageLog).count()
        successful_messages = db.query(MessageLog).filter(MessageLog.status == 'sent').count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        flood_wait_count = db.query(MessageLog).filter(MessageLog.status == 'flood_wait').count()
        error_count = db.query(MessageLog).filter(MessageLog.status == 'error').count()
        no_rights_count = db.query(MessageLog).filter(MessageLog.status == 'no_admin_rights').count()
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        recent_messages = db.query(MessageLog).order_by(MessageLog.timestamp.desc()).limit(5).all()
    
    success_rate = int(successful_messages / total_messages * 100) if total_messages > 0 else 0
    
    text = (
        f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–°–°–´–õ–û–ö**\n\n"
        f"üì± **–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
        f"‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {total_accounts}\n"
        f"‚Ä¢ –ì—Ä—É–ø–ø: {total_groups}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n\n"
        f"‚úÖ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏:**\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {successful_messages} ({success_rate}%)\n"
        f"‚Ä¢ FloodWait: {flood_wait_count}\n"
        f"‚Ä¢ –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞: {no_rights_count}\n"
        f"‚Ä¢ –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏: {error_count}\n\n"
    )
    
    if recent_messages:
        text += f"üïê **–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–∞—Å—Å—ã–ª–æ–∫:**\n"
        for msg in recent_messages:
            status_emoji = {
                'sent': '‚úÖ',
                'flood_wait': '‚è≥',
                'no_admin_rights': 'üö´',
                'error': '‚ùå'
            }.get(msg.status, '‚ùì')
            
            text += f"‚Ä¢ {status_emoji} {msg.timestamp.strftime('%d.%m %H:%M')} - {msg.text[:30]}...\n"
    else:
        text += f"üì≠ –†–∞—Å—Å—ã–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ –±—ã–ª–æ."
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", callback_data="admin_clear_logs"))
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    builder.adjust(1)
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="Markdown")
    await callback.answer()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def get_account_groups_count(account_id: int) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with next_get_db() as db:
            groups_count = db.query(Group).filter(Group.account_id == account_id).count()
            return groups_count
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
        return 0

async def get_account_groups_detailed(phone: str) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        session_file = f"session_{phone.replace('+', '')}"
        client = TelegramClient(session_file, TELEGRAM_API_ID, TELEGRAM_API_HASH)
        await client.start()
        
        dialogs = await client.get_dialogs()
        groups = []
        
        for dialog in dialogs:
            entity = dialog.entity
            if hasattr(entity, 'title'):  # –ì—Ä—É–ø–ø–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª
                groups.append({
                    'id': entity.id,
                    'title': entity.title,
                    'username': getattr(entity, 'username', None),
                    'participants_count': getattr(entity, 'participants_count', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                })
        
        await client.disconnect()
        return groups
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø –¥–ª—è {phone}: {e}")
        return []

async def execute_spam_campaign(account: Account, message_text: str, status_message):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        with next_get_db() as db:
            groups = db.query(Group).filter(Group.account_id == account.id).all()
        
        if not groups:
            await status_message.edit_text(
                f"‚ùå **–ù–ï–¢ –ì–†–£–ü–ü**\n\n"
                f"üìû –ê–∫–∫–∞—É–Ω—Ç: {account.phone}\n"
                f"üèòÔ∏è –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
                f"–°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.",
                parse_mode="Markdown"
            )
            return
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
        session_file = f"session_{account.phone.replace('+', '')}"
        client = TelegramClient(session_file, TELEGRAM_API_ID, TELEGRAM_API_HASH)
        await client.start()
        
        sent_count = 0
        error_count = 0
        
        await status_message.edit_text(
            f"üöÄ **–ù–ê–ß–ò–ù–ê–ï–ú –†–ê–°–°–´–õ–ö–£**\n\n"
            f"üìû –ê–∫–∫–∞—É–Ω—Ç: {account.phone}\n"
            f"üèòÔ∏è –ì—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {len(groups)}\n"
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message_text[:50]}...\n\n"
            f"‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...",
            parse_mode="Markdown"
        )
        
        for i, group in enumerate(groups, 1):
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –ø–æ –µ—ë Telegram ID
                await client.send_message(int(group.tg_id), message_text)
                sent_count += 1
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                with next_get_db() as db:
                    log_entry = MessageLog(
                        account_id=account.id,
                        group_id=group.id,
                        text=message_text[:500],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                        status='sent',
                        sent_at=datetime.now()
                    )
                    db.add(log_entry)
                    db.commit()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
                if i % 3 == 0 or i == len(groups):
                    progress = int(i/len(groups)*100)
                    await status_message.edit_text(
                        f"üöÄ **–†–ê–°–°–´–õ–ö–ê –í –ü–†–û–¶–ï–°–°–ï**\n\n"
                        f"üìû –ê–∫–∫–∞—É–Ω—Ç: {account.phone}\n"
                        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}/{len(groups)}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
                        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%\n"
                        f"üèòÔ∏è –¢–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞: {group.name[:30]}...",
                        parse_mode="Markdown"
                    )
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–∞–Ω—Ç–∏—Å–ø–∞–º)
                await asyncio.sleep(3)
                
            except FloodWaitError as e:
                print(f"FloodWait {e.seconds} —Å–µ–∫—É–Ω–¥ –¥–ª—è –≥—Ä—É–ø–ø—ã {group.name}")
                await asyncio.sleep(e.seconds + 1)
                error_count += 1
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                with next_get_db() as db:
                    log_entry = MessageLog(
                        account_id=account.id,
                        group_id=group.id,
                        text=message_text[:500],
                        status='flood_wait',
                        error_message=f"FloodWait {e.seconds}s",
                        sent_at=datetime.now()
                    )
                    db.add(log_entry)
                    db.commit()
                    
            except ChatAdminRequiredError:
                print(f"–ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ {group.name}")
                error_count += 1
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                with next_get_db() as db:
                    log_entry = MessageLog(
                        account_id=account.id,
                        group_id=group.id,
                        text=message_text[:500],
                        status='no_admin_rights',
                        error_message="No admin rights",
                        sent_at=datetime.now()
                    )
                    db.add(log_entry)
                    db.commit()
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {group.name}: {e}")
                error_count += 1
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                with next_get_db() as db:
                    log_entry = MessageLog(
                        account_id=account.id,
                        group_id=group.id,
                        text=message_text[:500],
                        status='error',
                        error_message=str(e)[:200],
                        sent_at=datetime.now()
                    )
                    db.add(log_entry)
                    db.commit()
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        success_rate = int(sent_count/len(groups)*100) if groups else 0
        await status_message.edit_text(
            f"‚úÖ **–†–ê–°–°–´–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê**\n\n"
            f"üìû –ê–∫–∫–∞—É–Ω—Ç: {account.phone}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
            f"üèòÔ∏è –í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {len(groups)}\n"
            f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate}%\n\n"
            f"üïê –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}\n\n"
            f"üìù –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.",
            parse_mode="Markdown"
        )
        
        await client.disconnect()
        
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await status_message.edit_text(
            f"‚ùå **–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê**\n\n"
            f"üìû –ê–∫–∫–∞—É–Ω—Ç: {account.phone}\n"
            f"üö´ –û—à–∏–±–∫–∞: {str(e)[:200]}\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
            f"‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞\n"
            f"‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n"
            f"‚Ä¢ –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
            parse_mode="Markdown"
        )

async def execute_custom_spam_campaign(account: Account, text_variants: list, selected_group_ids: list, status_message):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Å –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥—Ä—É–ø–ø–∞–º"""
    import random
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        with next_get_db() as db:
            groups = db.query(Group).filter(Group.id.in_(selected_group_ids)).all()
        
        if not groups:
            await status_message.edit_text(
                f"‚ùå **–ù–ï–¢ –ì–†–£–ü–ü**\n\n"
                f"üìû –ê–∫–∫–∞—É–Ω—Ç: {account.phone}\n"
                f"üèòÔ∏è –í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                parse_mode="Markdown"
            )
            return
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
        session_file = f"session_{account.phone.replace('+', '')}"
        client = TelegramClient(session_file, TELEGRAM_API_ID, TELEGRAM_API_HASH)
        await client.start()
        
        sent_count = 0
        error_count = 0
        
        await status_message.edit_text(
            f"üöÄ **–ö–ê–°–¢–û–ú–ù–ê–Ø –†–ê–°–°–´–õ–ö–ê –ó–ê–ü–£–©–ï–ù–ê**\n\n"
            f"üìû –ê–∫–∫–∞—É–Ω—Ç: {account.phone}\n"
            f"üìù –í–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞: {len(text_variants)}\n"
            f"üéØ –ì—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {len(groups)}\n\n"
            f"‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–µ–π —Ç–µ–∫—Å—Ç–æ–≤...",
            parse_mode="Markdown"
        )
        
        for i, group in enumerate(groups, 1):
            try:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                random_text = random.choice(text_variants)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
                await client.send_message(int(group.tg_id), random_text)
                sent_count += 1
                
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                with next_get_db() as db:
                    log_entry = MessageLog(
                        account_id=account.id,
                        group_id=group.id,
                        text=random_text[:500],
                        status='sent',
                        sent_at=datetime.now()
                    )
                    db.add(log_entry)
                    db.commit()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è
                if i % 2 == 0 or i == len(groups):
                    progress = int(i/len(groups)*100)
                    await status_message.edit_text(
                        f"üöÄ **–ö–ê–°–¢–û–ú–ù–ê–Ø –†–ê–°–°–´–õ–ö–ê –í –ü–†–û–¶–ï–°–°–ï**\n\n"
                        f"üìû –ê–∫–∫–∞—É–Ω—Ç: {account.phone}\n"
                        f"üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {len(text_variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞\n"
                        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}/{len(groups)}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
                        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%\n"
                        f"üèòÔ∏è –¢–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞: {group.name[:25]}...\n\n"
                        f"üé≤ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç: {random_text[:30]}...",
                        parse_mode="Markdown"
                    )
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–∞–Ω—Ç–∏—Å–ø–∞–º)
                await asyncio.sleep(3)
                
            except FloodWaitError as e:
                print(f"FloodWait {e.seconds} —Å–µ–∫—É–Ω–¥ –¥–ª—è –≥—Ä—É–ø–ø—ã {group.name}")
                await asyncio.sleep(e.seconds + 1)
                error_count += 1
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                with next_get_db() as db:
                    log_entry = MessageLog(
                        account_id=account.id,
                        group_id=group.id,
                        text=text_variants[0][:500],  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                        status='flood_wait',
                        error_message=f"FloodWait {e.seconds}s",
                        sent_at=datetime.now()
                    )
                    db.add(log_entry)
                    db.commit()
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {group.name}: {e}")
                error_count += 1
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                with next_get_db() as db:
                    log_entry = MessageLog(
                        account_id=account.id,
                        group_id=group.id,
                        text=text_variants[0][:500],
                        status='error'
                    )
                    db.add(log_entry)
                    db.commit()
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        success_rate = int(sent_count/len(groups)*100) if groups else 0
        await status_message.edit_text(
            f"‚úÖ **–ö–ê–°–¢–û–ú–ù–ê–Ø –†–ê–°–°–´–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê**\n\n"
            f"üìû –ê–∫–∫–∞—É–Ω—Ç: {account.phone}\n"
            f"üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞: {len(text_variants)}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
            f"üéØ –í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {len(groups)}\n"
            f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate}%\n\n"
            f"üé≤ **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:**\n"
            f"‚Ä¢ –¢–µ–∫—Å—Ç—ã –≤—ã–±–∏—Ä–∞–ª–∏—Å—å —Å–ª—É—á–∞–π–Ω–æ –∏–∑ {len(text_variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n"
            f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã\n"
            f"‚Ä¢ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n\n"
            f"üïê –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}",
            parse_mode="Markdown"
        )
        
        await client.disconnect()
        
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await status_message.edit_text(
            f"‚ùå **–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ö–ê–°–¢–û–ú–ù–û–ô –†–ê–°–°–´–õ–ö–ò**\n\n"
            f"üìû –ê–∫–∫–∞—É–Ω—Ç: {account.phone}\n"
            f"üö´ –û—à–∏–±–∫–∞: {str(e)[:200]}\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
            f"‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞\n"
            f"‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n"
            f"‚Ä¢ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∏ —Ç–µ–∫—Å—Ç—ã",
            parse_mode="Markdown"
        )

async def execute_mass_spam_campaign(accounts: list, message_text: str, status_message):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
    try:
        total_sent = 0
        total_errors = 0
        completed_accounts = 0
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø
        with next_get_db() as db:
            total_groups = db.query(Group).count()
        
        await status_message.edit_text(
            f"üöÄ **–ú–ê–°–°–û–í–ê–Ø –†–ê–°–°–´–õ–ö–ê –ó–ê–ü–£–©–ï–ù–ê**\n\n"
            f"üì± –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}\n"
            f"üèòÔ∏è –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø: {total_groups}\n"
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message_text[:50]}...\n\n"
            f"‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...\n"
            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: 0%",
            parse_mode="Markdown"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        tasks = []
        for account in accounts:
            task = asyncio.create_task(
                execute_single_account_spam(account, message_text, status_message, len(accounts))
            )
            tasks.append(task)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for result in results:
            if isinstance(result, dict):
                total_sent += result.get('sent', 0)
                total_errors += result.get('errors', 0)
                completed_accounts += 1
            else:
                total_errors += 1
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        success_rate = int(total_sent / (total_sent + total_errors) * 100) if (total_sent + total_errors) > 0 else 0
        
        await status_message.edit_text(
            f"‚úÖ **–ú–ê–°–°–û–í–ê–Ø –†–ê–°–°–´–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê**\n\n"
            f"üì± –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {completed_accounts}/{len(accounts)}\n"
            f"üèòÔ∏è –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø: {total_groups}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {total_errors}\n"
            f"üìä –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate}%\n\n"
            f"üïê –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}\n\n"
            f"üìù –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n"
            f"üìä –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫'.",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await status_message.edit_text(
            f"‚ùå **–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ú–ê–°–°–û–í–û–ô –†–ê–°–°–´–õ–ö–ò**\n\n"
            f"üö´ –û—à–∏–±–∫–∞: {str(e)[:200]}\n\n"
            f"–†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
            f"‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
            f"‚Ä¢ –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã",
            parse_mode="Markdown"
        )

async def execute_single_account_spam(account: Account, message_text: str, status_message, total_accounts: int):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Å –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∞–∫–∫–∞—É–Ω—Ç–∞
        with next_get_db() as db:
            groups = db.query(Group).filter(Group.account_id == account.id).all()
        
        if not groups:
            return {'sent': 0, 'errors': 0, 'account': account.phone}
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
        session_file = f"session_{account.phone.replace('+', '')}"
        client = TelegramClient(session_file, TELEGRAM_API_ID, TELEGRAM_API_HASH)
        await client.start()
        
        sent_count = 0
        error_count = 0
        
        for group in groups:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await client.send_message(int(group.tg_id), message_text)
                sent_count += 1
                
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                with next_get_db() as db:
                    log_entry = MessageLog(
                        account_id=account.id,
                        group_id=group.id,
                        text=message_text[:500],
                        status='sent',
                        sent_at=datetime.now()
                    )
                    db.add(log_entry)
                    db.commit()
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                await asyncio.sleep(2)
                
            except FloodWaitError as e:
                await asyncio.sleep(e.seconds + 1)
                error_count += 1
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                with next_get_db() as db:
                    log_entry = MessageLog(
                        account_id=account.id,
                        group_id=group.id,
                        text=message_text[:500],
                        status='flood_wait',
                        error_message=f"FloodWait {e.seconds}s",
                        sent_at=datetime.now()
                    )
                    db.add(log_entry)
                    db.commit()
                    
            except Exception as e:
                error_count += 1
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                with next_get_db() as db:
                    log_entry = MessageLog(
                        account_id=account.id,
                        group_id=group.id,
                        text=message_text[:500],
                        status='error',
                        error_message=str(e)[:200],
                        sent_at=datetime.now()
                    )
                    db.add(log_entry)
                    db.commit()
        
        await client.disconnect()
        return {'sent': sent_count, 'errors': error_count, 'account': account.phone}
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∞–∫–∫–∞—É–Ω—Ç–∞ {account.phone}: {e}")
        return {'sent': 0, 'errors': 1, 'account': account.phone}

@router.callback_query(F.data == "admin_clear_logs")
async def clear_admin_logs(callback: CallbackQuery):
    """–û—á–∏—â–∞–µ—Ç –ª–æ–≥–∏ —Ä–∞—Å—Å—ã–ª–æ–∫"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    with next_get_db() as db:
        deleted_count = db.query(MessageLog).count()
        db.query(MessageLog).delete()
        db.commit()
    
    await callback.answer(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π –∏–∑ –ª–æ–≥–æ–≤", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await show_admin_stats(callback)
