from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from utils.keyboards import get_main_menu_keyboard, get_account_menu_keyboard, get_back_keyboard, get_cancel_keyboard
from services.auth_service import auth_service
from services.mailing_service import mailing_service
from database.models import Account, Group, Mailing
from database.database import get_db
from config import ADMIN_IDS

router = Router()

class AccountAuth(StatesGroup):
    waiting_phone = State()
    waiting_code = State()
    waiting_password = State()

@router.callback_query(F.data == "add_account")
async def add_account_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    await callback.message.edit_text(
        "üì± –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "+79000000000",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AccountAuth.waiting_phone)
    await callback.answer()

@router.callback_query(F.data == "cancel_operation")
async def cancel_operation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
    await state.clear()
    welcome_text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {callback.from_user.first_name}!\n\n–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await callback.message.edit_text(welcome_text, reply_markup=get_main_menu_keyboard())
    await callback.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")


@router.message(AccountAuth.waiting_phone)
async def process_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = message.text.strip()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ API credentials
    from config import TELEGRAM_API_ID, TELEGRAM_API_HASH
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ API credentials
    result = await auth_service.start_auth(message.from_user.id, phone, TELEGRAM_API_ID, TELEGRAM_API_HASH)
    
    if result["success"]:
        await message.answer(result["message"], reply_markup=get_cancel_keyboard())
        await state.set_state(AccountAuth.waiting_code)
    else:
        error_msg = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await message.answer(f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", reply_markup=get_cancel_keyboard())
        await state.set_state(AccountAuth.waiting_phone)

@router.message(AccountAuth.waiting_code)
async def process_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    code = message.text.strip()
    
    result = await auth_service.verify_code(message.from_user.id, code)
    
    if result["success"]:
        await message.answer(result["message"], reply_markup=get_main_menu_keyboard())
        await state.clear()
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª—é—á "message" –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        if "message" in result and "–ø–∞—Ä–æ–ª—å" in result["message"].lower():
            await message.answer(result["message"], reply_markup=get_cancel_keyboard())
            await state.set_state(AccountAuth.waiting_password)
        else:
            error_msg = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            
            # –ï—Å–ª–∏ –∫–æ–¥ –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ
            if any(keyword in error_msg.lower() for keyword in ["–∏—Å—Ç–µ–∫", "–∑–∞–Ω–æ–≤–æ", "—Å–±—Ä–æ—à–µ–Ω–∞", "–æ–≥—Ä–∞–Ω–∏—á–∏–ª"]):
                from aiogram.utils.keyboard import InlineKeyboardBuilder
                builder = InlineKeyboardBuilder()
                builder.add(InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="add_account"))
                builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_operation"))
                builder.adjust(1)
                
                await message.answer(f"‚ùå {error_msg}\n\n–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞–Ω–æ–≤–æ:", reply_markup=builder.as_markup())
                await state.clear()
            else:
                await message.answer(f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", reply_markup=get_cancel_keyboard())
                await state.set_state(AccountAuth.waiting_code)

@router.message(AccountAuth.waiting_password)
async def process_password(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    password = message.text.strip()
    
    result = await auth_service.verify_password(message.from_user.id, password)
    
    if result["success"]:
        await message.answer(result["message"], reply_markup=get_main_menu_keyboard())
        await state.clear()
    else:
        error_msg = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Ä—å–µ–∑–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ
        if any(keyword in error_msg.lower() for keyword in ["–æ–≥—Ä–∞–Ω–∏—á–∏–ª", "–∑–∞–Ω–æ–≤–æ", "—Å–±—Ä–æ—à–µ–Ω–∞"]):
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="add_account"))
            builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_operation"))
            builder.adjust(1)
            
            await message.answer(f"‚ùå {error_msg}\n\n–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞–Ω–æ–≤–æ:", reply_markup=builder.as_markup())
            await state.clear()
        else:
            await message.answer(f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", reply_markup=get_cancel_keyboard())
            await state.set_state(AccountAuth.waiting_password)

@router.callback_query(F.data == "my_accounts")
async def show_accounts(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    with next(get_db()) as db:
        accounts = db.query(Account).filter(Account.is_active == True).all()
    
    if not accounts:
        text = "üë§ –ú–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã\n\n–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤."
        await callback.message.edit_text(text, reply_markup=get_back_keyboard())
    else:
        text = "üë§ –ú–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã:\n\n"
        for i, account in enumerate(accounts, 1):
            text += f"{i}. {account.name} ({account.phone})\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        builder = InlineKeyboardBuilder()
        for account in accounts:
            builder.add(InlineKeyboardButton(
                text=f"üë§ {account.name}",
                callback_data=f"account_menu:{account.id}"
            ))
        builder.add(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_main"
        ))
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
    
    await callback.answer()

@router.callback_query(F.data.startswith("account_menu:"))
async def account_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    account_id = int(callback.data.split(":")[1])
    
    with next(get_db()) as db:
        account = db.query(Account).filter(Account.id == account_id).first()
        if not account:
            await callback.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö
        groups = db.query(Group).filter(Group.account_id == account_id).all()
        groups_text = f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {len(groups)} –≥—Ä—É–ø–ø." if groups else "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≥—Ä—É–ø–ø."
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏
        from database.models import Mailing
        active_mailings = db.query(Mailing).filter(
            Mailing.account_id == account_id,
            Mailing.is_active == True
        ).count()
        
        text = f"–ú–µ–Ω—é –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.name}:\n\n"
        text += f"üìä –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞: {'üü¢ –í–ö–õ' if active_mailings > 0 else 'üî¥ –í–´–ö–õ'}\n"
        text += f"üë§ –ò–º—è: {account.name}\n"
        text += f"üì± –ù–æ–º–µ—Ä: {account.phone}\n\n"
        text += f"üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:\n{groups_text}"
    
    await callback.message.edit_text(text, reply_markup=get_account_menu_keyboard(account_id))
    await callback.answer()

@router.callback_query(F.data.startswith("delete_account:"))
async def delete_account(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç"""
    account_id = int(callback.data.split(":")[1])
    
    try:
        from services.mailing_service import mailing_service
        from database.database import get_async_db
        from sqlalchemy import select
        
        async with get_async_db() as db:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
            account_result = await db.execute(
                select(Account).filter(Account.id == account_id)
            )
            account = account_result.scalar_one_or_none()
            
            if not account:
                await callback.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            from database.models import Mailing
            mailings_result = await db.execute(
                select(Mailing).filter(
                    Mailing.account_id == account_id,
                    Mailing.is_active == True
                )
            )
            active_mailings = mailings_result.scalars().all()
            
            for mailing in active_mailings:
                await mailing_service.stop_mailing(mailing.id)
            
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∞–∫–∫–∞—É–Ω—Ç–∞
            groups_result = await db.execute(
                select(Group).filter(Group.account_id == account_id)
            )
            groups = groups_result.scalars().all()
            
            # –£–¥–∞–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–∏—Å–∏–º—ã–µ –∑–∞–ø–∏—Å–∏)
            for group in groups:
                # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
                from database.models import MailingHistory
                await db.execute(
                    select(MailingHistory).filter(MailingHistory.group_id == group.id)
                )
                history_result = await db.execute(
                    select(MailingHistory).filter(MailingHistory.group_id == group.id)
                )
                history_records = history_result.scalars().all()
                for history in history_records:
                    await db.delete(history)
                
                # –£–¥–∞–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
                group_mailings_result = await db.execute(
                    select(Mailing).filter(Mailing.group_id == group.id)
                )
                group_mailings = group_mailings_result.scalars().all()
                for mailing in group_mailings:
                    await db.delete(mailing)
                
                # –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º —Å–∞–º—É –≥—Ä—É–ø–ø—É
                await db.delete(group)
            
            # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
            await db.delete(account)
            await db.commit()
            
            await callback.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        welcome_text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {callback.from_user.first_name}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        await callback.message.edit_text(welcome_text, reply_markup=get_main_menu_keyboard())
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞") 