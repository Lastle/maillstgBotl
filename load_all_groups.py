#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
from telethon import TelegramClient
from database.models import Account, Group
from database.database import get_db
from config import TELEGRAM_API_ID, TELEGRAM_API_HASH
import logging

logging.basicConfig(level=logging.INFO, encoding='utf-8')
logger = logging.getLogger(__name__)

async def load_account_groups(account):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≥—Ä—É–ø–ø—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        client = TelegramClient(account.session_path, TELEGRAM_API_ID, TELEGRAM_API_HASH)
        await client.connect()
        
        if await client.is_user_authorized():
            logger.info(f"üì± –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è {account.name} ({account.phone})")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏
            dialogs = await client.get_dialogs()
            groups_count = 0
            channels_count = 0
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≥—Ä—É–ø–ø—ã —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            with next(get_db()) as db:
                db.query(Group).filter(Group.account_id == account.id).delete()
                db.commit()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã
            with next(get_db()) as db:
                for dialog in dialogs:
                    if dialog.is_group or dialog.is_channel:
                        group_type = 'group' if dialog.is_group else 'channel'
                        
                        group = Group(
                            account_id=account.id,
                            tg_id=str(dialog.id),
                            name=dialog.name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                            type=group_type
                        )
                        db.add(group)
                        
                        if dialog.is_group:
                            groups_count += 1
                        else:
                            channels_count += 1
                
                db.commit()
            
            logger.info(f"  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {groups_count} –≥—Ä—É–ø–ø, {channels_count} –∫–∞–Ω–∞–ª–æ–≤")
            return {"groups": groups_count, "channels": channels_count}
            
        else:
            logger.warning(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account.name} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return {"error": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä—É–ø–ø –¥–ª—è {account.name}: {e}")
        return {"error": str(e)}
    finally:
        try:
            await client.disconnect()
        except:
            pass

async def load_all_groups():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≥—Ä—É–ø–ø—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≥—Ä—É–ø–ø –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    
    with next(get_db()) as db:
        accounts = db.query(Account).all()
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}")
    
    total_groups = 0
    total_channels = 0
    
    for account in accounts:
        result = await load_account_groups(account)
        if "error" not in result:
            total_groups += result["groups"]
            total_channels += result["channels"]
    
    logger.info(f"\nüéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    logger.info(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {total_groups} –≥—Ä—É–ø–ø, {total_channels} –∫–∞–Ω–∞–ª–æ–≤")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
    logger.info("\nüìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º:")
    with next(get_db()) as db:
        accounts = db.query(Account).all()
        for account in accounts:
            groups = db.query(Group).filter(Group.account_id == account.id).all()
            group_count = len([g for g in groups if g.type == 'group'])
            channel_count = len([g for g in groups if g.type == 'channel'])
            logger.info(f"  üì± {account.name}: {group_count} –≥—Ä—É–ø–ø, {channel_count} –∫–∞–Ω–∞–ª–æ–≤")

if __name__ == "__main__":
    asyncio.run(load_all_groups())
