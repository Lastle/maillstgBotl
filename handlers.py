# handlers.py

from aiogram import types, Dispatcher
from utils.keyboards import main_menu, groups_menu
from services import (
    register_new_account, register_new_group,
    perform_mailing, get_analytics, is_authorized
)
from db import get_accounts, get_groups, get_logs
from database.models import init_db

def register_handlers(dp: Dispatcher):
    init_db()

    @dp.message_handler(commands=['start'])
    async def cmd_start(msg: types.Message):
        await msg.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

    # --- –î–û–ë–ê–í–ò–¢–¨ –ê–ö–ö–ê–£–ù–¢ ---
    @dp.message_handler(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
    async def acc_start(msg: types.Message):
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ: TG_ID PHONE NAME TOKEN SESSION_PATH –†–û–õ–¨ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, —Ä–æ–ª—å user/operator/admin)")

    @dp.message_handler(lambda m: len(m.text.split()) == 6 and not m.text.startswith('/'))
    async def handle_acc(msg: types.Message):
        tg_id, phone, name, token, session_path, role = msg.text.split()
        ok, result = register_new_account(tg_id, phone, name, token, session_path, role)
        await msg.answer(result, reply_markup=main_menu())

    # --- –î–û–ë–ê–í–ò–¢–¨ –ì–†–£–ü–ü–£ ---
    @dp.message_handler(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É")
    async def add_grp(msg: types.Message):
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ: GROUP_ID TITLE [SEGMENT] (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)")

    @dp.message_handler(lambda m: len(m.text.split()) >= 2 and m.text.split()[0].isdigit())
    async def handle_grp(msg: types.Message):
        group_id, title, *segment = msg.text.split()
        segment = " ".join(segment) if segment else ''
        ok, result = register_new_group(group_id, title, segment)
        await msg.answer(result, reply_markup=main_menu())

    # --- –°–ü–ò–°–û–ö –ê–ö–ö–ê–£–ù–¢–û–í ---
    @dp.message_handler(lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    async def acc_list(msg: types.Message):
        accs = get_accounts()
        if not accs:
            await msg.answer("–ê–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ—Ç.")
        else:
            text = "\n".join(
                f"{a.tg_id} {a.phone} {a.name} {a.role}" for a in accs)
            await msg.answer(f"–ê–∫–∫–∞—É–Ω—Ç—ã:\n{text}")

    # --- –°–ü–ò–°–û–ö –ì–†–£–ü–ü ---
    @dp.message_handler(lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø")
    async def grp_list(msg: types.Message):
        grps = get_groups()
        if not grps:
            await msg.answer("–ì—Ä—É–ø–ø –Ω–µ—Ç.")
        else:
            text = "\n".join(f"{g.group_id} {g.title} [{g.segment}]" for g in grps)
            await msg.answer(f"–ì—Ä—É–ø–ø—ã:\n{text}")

    # --- –†–ê–°–°–´–õ–ö–ê ---
    @dp.message_handler(lambda m: m.text == "üì§ –†–∞—Å—Å—ã–ª–∫–∞")
    async def mailing(msg: types.Message):
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏, —Ä–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:")

    @dp.message_handler(lambda m: len(m.text) > 5 and not m.text.startswith('/'))
    async def process_mailing(msg: types.Message):
        if not is_authorized(str(msg.from_user.id)):
            await msg.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!")
            return
        ok, results = perform_mailing(msg.text, str(msg.from_user.id))
        if not ok:
            await msg.answer(results)
            return
        success = sum(1 for _, status in results if status == 'success')
        fails = sum(1 for _, status in results if status != 'success')
        await msg.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: {success}\n–û—à–∏–±–æ–∫: {fails}")

    # --- –ê–ù–ê–õ–ò–¢–ò–ö–ê ---
    @dp.message_handler(lambda m: m.text == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
    async def analytics(msg: types.Message):
        a = get_analytics()
        await msg.answer(f"–ê–∫–∫–∞—É–Ω—Ç–æ–≤: {a['accounts_count']}\n–ì—Ä—É–ø–ø: {a['groups_count']}")

    # --- –õ–û–ì–ò ---
    @dp.message_handler(lambda m: m.text == "üóí –õ–æ–≥–∏")
    async def logs(msg: types.Message):
        logs = get_logs()
        if not logs:
            await msg.answer("–õ–æ–≥–æ–≤ –Ω–µ—Ç.")
        else:
            text = "\n".join(
                f"[{l.timestamp:%H:%M %d/%m}] {l.group_id} {l.text[:20]}..: {l.status}"
                for l in logs)
            await msg.answer(f"–õ–æ–≥–∏:\n{text}")
