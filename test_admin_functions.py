#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""

import asyncio
from telethon import TelegramClient
from database.models import Account, Group
from database.database import next_get_db
from config import TELEGRAM_API_ID, TELEGRAM_API_HASH
import logging

logging.basicConfig(level=logging.INFO, encoding='utf-8')
logger = logging.getLogger(__name__)

async def test_account_groups(account):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        client = TelegramClient(account.session_path, TELEGRAM_API_ID, TELEGRAM_API_HASH)
        await client.connect()
        
        if await client.is_user_authorized():
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è {account.name} ({account.phone})")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏
            dialogs = await client.get_dialogs()
            groups_count = 0
            channels_count = 0
            
            for dialog in dialogs:
                if dialog.is_group:
                    groups_count += 1
                elif dialog.is_channel:
                    channels_count += 1
            
            logger.info(f"  üì± –ì—Ä—É–ø–ø: {groups_count}, –ö–∞–Ω–∞–ª–æ–≤: {channels_count}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ë–î
            with next_get_db() as db:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –≥—Ä—É–ø–ø –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                db.query(Group).filter(Group.account_id == account.id).delete()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã
                for dialog in dialogs:
                    if dialog.is_group or dialog.is_channel:
                        group = Group(
                            account_id=account.id,
                            tg_id=str(dialog.id),
                            name=dialog.name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                            type='group' if dialog.is_group else 'channel'
                        )
                        db.add(group)
                
                db.commit()
                
            return {"groups": groups_count, "channels": channels_count}
        else:
            logger.warning(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account.name} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return {"error": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä—É–ø–ø –¥–ª—è {account.name}: {e}")
        return {"error": str(e)}
    finally:
        try:
            await client.disconnect()
        except:
            pass

async def test_all_admin_functions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    
    # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    logger.info("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é '–í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏ –Ω–æ–º–µ—Ä–∞'")
    with next_get_db() as db:
        accounts = db.query(Account).all()
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –ë–î: {len(accounts)}")
        
        for account in accounts:
            logger.info(f"  ‚Ä¢ {account.name} ({account.phone}) - ID: {account.tg_id}")
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    logger.info("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
    total_groups = 0
    total_channels = 0
    
    for account in accounts:
        result = await test_account_groups(account)
        if "error" not in result:
            total_groups += result["groups"]
            total_channels += result["channels"]
    
    logger.info(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {total_groups} –≥—Ä—É–ø–ø, {total_channels} –∫–∞–Ω–∞–ª–æ–≤")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    logger.info("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î")
    with next_get_db() as db:
        groups_in_db = db.query(Group).all()
        logger.info(f"‚úÖ –ì—Ä—É–ø–ø –≤ –ë–î: {len(groups_in_db)}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
        account_groups = {}
        for group in groups_in_db:
            if group.account_id not in account_groups:
                account_groups[group.account_id] = []
            account_groups[group.account_id].append(group)
        
        for account_id, groups in account_groups.items():
            account = db.query(Account).filter(Account.id == account_id).first()
            if account:
                logger.info(f"  üì± {account.name}: {len(groups)} –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤")
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏)
    logger.info("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ")
    test_message = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞"
    
    with next_get_db() as db:
        accounts = db.query(Account).all()
        available_accounts = []
        
        for account in accounts:
            groups = db.query(Group).filter(Group.account_id == account.id).all()
            if groups:
                available_accounts.append({
                    "account": account,
                    "groups_count": len(groups)
                })
        
        logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –≥–æ—Ç–æ–≤—ã—Ö –∫ —Ä–∞—Å—Å—ã–ª–∫–µ: {len(available_accounts)}")
        for acc_info in available_accounts:
            account = acc_info["account"]
            logger.info(f"  üì§ {account.name}: {acc_info['groups_count']} –≥—Ä—É–ø–ø")
    
    logger.info("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ.")

if __name__ == "__main__":
    asyncio.run(test_all_admin_functions())
