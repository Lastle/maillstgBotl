import random
import asyncio
from datetime import datetime, timedelta
from typing import Optional, Tuple
from config import NIGHT_MODE_MULTIPLIER, DEFAULT_NIGHT_START, DEFAULT_NIGHT_END

def truncate_text(text: str, max_length: int = 100) -> str:
    """–û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if len(text) <= max_length:
        return text
    return text[:max_length-3] + "..."

def format_time_ago(timestamp: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'X —Å–µ–∫—É–Ω–¥/–º–∏–Ω—É—Ç/—á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥'"""
    now = datetime.utcnow()
    diff = now - timestamp
    
    if diff.total_seconds() < 60:
        seconds = int(diff.total_seconds())
        return f"{seconds} —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥"
    elif diff.total_seconds() < 3600:
        minutes = int(diff.total_seconds() // 60)
        return f"{minutes} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥"
    else:
        hours = int(diff.total_seconds() // 3600)
        return f"{hours} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"

def is_night_mode(start_hour: int = DEFAULT_NIGHT_START, end_hour: int = DEFAULT_NIGHT_END) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º"""
    now = datetime.now()
    current_hour = now.hour
    
    if start_hour > end_hour:  # –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
        return current_hour >= start_hour or current_hour <= end_hour
    else:
        return start_hour <= current_hour <= end_hour

def calculate_interval(min_interval: int, max_interval: int, 
                      night_mode_enabled: bool = False,
                      night_start: int = DEFAULT_NIGHT_START,
                      night_end: int = DEFAULT_NIGHT_END) -> int:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å —É—á–µ—Ç–æ–º –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    interval = random.randint(min_interval, max_interval)
    
    # –ï—Å–ª–∏ –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω –∏ —Å–µ–π—á–∞—Å –Ω–æ—á—å, —É–º–Ω–æ–∂–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
    if night_mode_enabled and is_night_mode(night_start, night_end):
        interval = int(interval * NIGHT_MODE_MULTIPLIER)
    
    return interval

def validate_phone(phone: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    import re
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
    phone = re.sub(r'[^\d+]', '', phone)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç +7XXXXXXXXXX –∏–ª–∏ +44XXXXXXXXXX
    pattern = r'^\+[1-9]\d{10,14}$'
    return bool(re.match(pattern, phone))

def validate_code(code: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    return code.isdigit() and len(code) >= 4 and len(code) <= 6

async def wait_with_timeout(seconds: int) -> bool:
    """–û–∂–∏–¥–∞–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
    try:
        await asyncio.sleep(seconds)
        return True
    except asyncio.CancelledError:
        return False

def format_group_info(title: str, member_count: int, group_type: str, is_private: bool) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ"""
    privacy = "–ø—Ä–∏–≤–∞—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞" if is_private else "–ø—É–±–ª–∏—á–Ω–∞—è –≥—Ä—É–ø–ø–∞"
    return f"{title} ({privacy}, {member_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, {group_type})"

def format_mailing_status(is_active: bool, started_at: Optional[datetime] = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_active:
        return "üî¥ –í–´–ö–õ"
    
    if started_at:
        return f"üü¢ –í–ö–õ (–∑–∞–ø—É—â–µ–Ω–∞ {format_time_ago(started_at)})"
    
    return "üü¢ –í–ö–õ" 