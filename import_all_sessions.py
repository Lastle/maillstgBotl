#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Å—Å–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import os
import asyncio
from telethon import TelegramClient
from database.models import Account
from database.database import next_get_db
from config import TELEGRAM_API_ID, TELEGRAM_API_HASH
import logging

logging.basicConfig(level=logging.INFO, encoding='utf-8')
logger = logging.getLogger(__name__)

async def import_session_to_db(session_file):
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    session_name = session_file.replace('.session', '')
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–µ–π
        client = TelegramClient(session_name, TELEGRAM_API_ID, TELEGRAM_API_HASH)
        
        await client.connect()
        
        if await client.is_user_authorized():
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            me = await client.get_me()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç –≤ –ë–î
            with next_get_db() as db:
                existing_account = db.query(Account).filter(Account.tg_id == str(me.id)).first()
                
                if not existing_account:
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
                    account = Account(
                        tg_id=str(me.id),
                        phone=me.phone if hasattr(me, 'phone') and me.phone else f"+{session_name.replace('session_', '')}",
                        name=me.first_name or me.username or f"User_{me.id}",
                        api_id=str(TELEGRAM_API_ID),
                        api_hash=TELEGRAM_API_HASH,
                        session_path=session_name
                    )
                    db.add(account)
                    db.commit()
                    
                    logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∞–∫–∫–∞—É–Ω—Ç: {account.name} ({account.phone}) - ID: {account.tg_id}")
                else:
                    logger.info(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {existing_account.name} ({existing_account.phone})")
        else:
            logger.warning(f"‚ùå –°–µ—Å—Å–∏—è {session_name} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
            
        await client.disconnect()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Å–µ—Å—Å–∏–∏ {session_name}: {e}")

async def import_all_sessions():
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏"""
    session_files = [
        'session_14175706252.session',
        'session_14316815822.session', 
        'session_380686662002.session',
        'session_380686662003.session',
        'session_48608395363.session',
        'session_919525704829.session',
        'session_959782907883.session',
        'session_959784691910.session',
        'session_959785658943.session',
        'test_session_959784691910.session',
        'user_1332770104.session'
    ]
    
    logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(session_files)} —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π")
    
    for session_file in session_files:
        if os.path.exists(session_file):
            logger.info(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {session_file}")
            await import_session_to_db(session_file)
        else:
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {session_file}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ –ë–î
    logger.info("\nüìä –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
    with next_get_db() as db:
        accounts = db.query(Account).all()
        for account in accounts:
            logger.info(f"  ‚Ä¢ {account.name} ({account.phone}) - TG ID: {account.tg_id}")
    
    logger.info(f"\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –ë–î: {len(accounts)}")

if __name__ == "__main__":
    asyncio.run(import_all_sessions())
